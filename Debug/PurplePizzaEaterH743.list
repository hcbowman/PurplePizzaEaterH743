
PurplePizzaEaterH743.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b80  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005e18  08005e18  00015e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08005e50  08005e50  00015e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005e58  08005e58  00015e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005e5c  08005e5c  00015e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  24000000  08005e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000010  08005e70  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000070  08005ed0  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000057c  240000d0  08005f30  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400064c  08005f30  0002064c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f0a0  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003022  00000000  00000000  0003f19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef8  00000000  00000000  000421c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e20  00000000  00000000  000430b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00036a79  00000000  00000000  00043ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a3f  00000000  00000000  0007a951  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0015c3c0  00000000  00000000  0008c390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e8750  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f40  00000000  00000000  001e87a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005e00 	.word	0x08005e00

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08005e00 	.word	0x08005e00

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96e 	b.w	80005cc <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468c      	mov	ip, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	f040 8083 	bne.w	800041e <__udivmoddi4+0x116>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d947      	bls.n	80003ae <__udivmoddi4+0xa6>
 800031e:	fab2 f282 	clz	r2, r2
 8000322:	b142      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000324:	f1c2 0020 	rsb	r0, r2, #32
 8000328:	fa24 f000 	lsr.w	r0, r4, r0
 800032c:	4091      	lsls	r1, r2
 800032e:	4097      	lsls	r7, r2
 8000330:	ea40 0c01 	orr.w	ip, r0, r1
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbbc f6f8 	udiv	r6, ip, r8
 8000340:	fa1f fe87 	uxth.w	lr, r7
 8000344:	fb08 c116 	mls	r1, r8, r6, ip
 8000348:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034c:	fb06 f10e 	mul.w	r1, r6, lr
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f106 30ff 	add.w	r0, r6, #4294967295
 800035a:	f080 8119 	bcs.w	8000590 <__udivmoddi4+0x288>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8116 	bls.w	8000590 <__udivmoddi4+0x288>
 8000364:	3e02      	subs	r6, #2
 8000366:	443b      	add	r3, r7
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000370:	fb08 3310 	mls	r3, r8, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fe0e 	mul.w	lr, r0, lr
 800037c:	45a6      	cmp	lr, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	193c      	adds	r4, r7, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8105 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f240 8102 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000390:	3802      	subs	r0, #2
 8000392:	443c      	add	r4, r7
 8000394:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	2600      	movs	r6, #0
 800039e:	b11d      	cbz	r5, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c5 4300 	strd	r4, r3, [r5]
 80003a8:	4631      	mov	r1, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	b902      	cbnz	r2, 80003b2 <__udivmoddi4+0xaa>
 80003b0:	deff      	udf	#255	; 0xff
 80003b2:	fab2 f282 	clz	r2, r2
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d150      	bne.n	800045c <__udivmoddi4+0x154>
 80003ba:	1bcb      	subs	r3, r1, r7
 80003bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c0:	fa1f f887 	uxth.w	r8, r7
 80003c4:	2601      	movs	r6, #1
 80003c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80003ca:	0c21      	lsrs	r1, r4, #16
 80003cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80003d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d4:	fb08 f30c 	mul.w	r3, r8, ip
 80003d8:	428b      	cmp	r3, r1
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0xe4>
 80003dc:	1879      	adds	r1, r7, r1
 80003de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0xe2>
 80003e4:	428b      	cmp	r3, r1
 80003e6:	f200 80e9 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 80003ea:	4684      	mov	ip, r0
 80003ec:	1ac9      	subs	r1, r1, r3
 80003ee:	b2a3      	uxth	r3, r4
 80003f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80003f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003fc:	fb08 f800 	mul.w	r8, r8, r0
 8000400:	45a0      	cmp	r8, r4
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x10c>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f100 33ff 	add.w	r3, r0, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x10a>
 800040c:	45a0      	cmp	r8, r4
 800040e:	f200 80d9 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 8000412:	4618      	mov	r0, r3
 8000414:	eba4 0408 	sub.w	r4, r4, r8
 8000418:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800041c:	e7bf      	b.n	800039e <__udivmoddi4+0x96>
 800041e:	428b      	cmp	r3, r1
 8000420:	d909      	bls.n	8000436 <__udivmoddi4+0x12e>
 8000422:	2d00      	cmp	r5, #0
 8000424:	f000 80b1 	beq.w	800058a <__udivmoddi4+0x282>
 8000428:	2600      	movs	r6, #0
 800042a:	e9c5 0100 	strd	r0, r1, [r5]
 800042e:	4630      	mov	r0, r6
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	fab3 f683 	clz	r6, r3
 800043a:	2e00      	cmp	r6, #0
 800043c:	d14a      	bne.n	80004d4 <__udivmoddi4+0x1cc>
 800043e:	428b      	cmp	r3, r1
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0x140>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 80b8 	bhi.w	80005b8 <__udivmoddi4+0x2b0>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb61 0103 	sbc.w	r1, r1, r3
 800044e:	2001      	movs	r0, #1
 8000450:	468c      	mov	ip, r1
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0a8      	beq.n	80003a8 <__udivmoddi4+0xa0>
 8000456:	e9c5 4c00 	strd	r4, ip, [r5]
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0xa0>
 800045c:	f1c2 0320 	rsb	r3, r2, #32
 8000460:	fa20 f603 	lsr.w	r6, r0, r3
 8000464:	4097      	lsls	r7, r2
 8000466:	fa01 f002 	lsl.w	r0, r1, r2
 800046a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800046e:	40d9      	lsrs	r1, r3
 8000470:	4330      	orrs	r0, r6
 8000472:	0c03      	lsrs	r3, r0, #16
 8000474:	fbb1 f6fe 	udiv	r6, r1, lr
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000480:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000484:	fb06 f108 	mul.w	r1, r6, r8
 8000488:	4299      	cmp	r1, r3
 800048a:	fa04 f402 	lsl.w	r4, r4, r2
 800048e:	d909      	bls.n	80004a4 <__udivmoddi4+0x19c>
 8000490:	18fb      	adds	r3, r7, r3
 8000492:	f106 3cff 	add.w	ip, r6, #4294967295
 8000496:	f080 808d 	bcs.w	80005b4 <__udivmoddi4+0x2ac>
 800049a:	4299      	cmp	r1, r3
 800049c:	f240 808a 	bls.w	80005b4 <__udivmoddi4+0x2ac>
 80004a0:	3e02      	subs	r6, #2
 80004a2:	443b      	add	r3, r7
 80004a4:	1a5b      	subs	r3, r3, r1
 80004a6:	b281      	uxth	r1, r0
 80004a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b4:	fb00 f308 	mul.w	r3, r0, r8
 80004b8:	428b      	cmp	r3, r1
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x1c4>
 80004bc:	1879      	adds	r1, r7, r1
 80004be:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c2:	d273      	bcs.n	80005ac <__udivmoddi4+0x2a4>
 80004c4:	428b      	cmp	r3, r1
 80004c6:	d971      	bls.n	80005ac <__udivmoddi4+0x2a4>
 80004c8:	3802      	subs	r0, #2
 80004ca:	4439      	add	r1, r7
 80004cc:	1acb      	subs	r3, r1, r3
 80004ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004d2:	e778      	b.n	80003c6 <__udivmoddi4+0xbe>
 80004d4:	f1c6 0c20 	rsb	ip, r6, #32
 80004d8:	fa03 f406 	lsl.w	r4, r3, r6
 80004dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80004e0:	431c      	orrs	r4, r3
 80004e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80004e6:	fa01 f306 	lsl.w	r3, r1, r6
 80004ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80004f2:	431f      	orrs	r7, r3
 80004f4:	0c3b      	lsrs	r3, r7, #16
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fa1f f884 	uxth.w	r8, r4
 80004fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000502:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000506:	fb09 fa08 	mul.w	sl, r9, r8
 800050a:	458a      	cmp	sl, r1
 800050c:	fa02 f206 	lsl.w	r2, r2, r6
 8000510:	fa00 f306 	lsl.w	r3, r0, r6
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x220>
 8000516:	1861      	adds	r1, r4, r1
 8000518:	f109 30ff 	add.w	r0, r9, #4294967295
 800051c:	d248      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 800051e:	458a      	cmp	sl, r1
 8000520:	d946      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000522:	f1a9 0902 	sub.w	r9, r9, #2
 8000526:	4421      	add	r1, r4
 8000528:	eba1 010a 	sub.w	r1, r1, sl
 800052c:	b2bf      	uxth	r7, r7
 800052e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000532:	fb0e 1110 	mls	r1, lr, r0, r1
 8000536:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800053a:	fb00 f808 	mul.w	r8, r0, r8
 800053e:	45b8      	cmp	r8, r7
 8000540:	d907      	bls.n	8000552 <__udivmoddi4+0x24a>
 8000542:	19e7      	adds	r7, r4, r7
 8000544:	f100 31ff 	add.w	r1, r0, #4294967295
 8000548:	d22e      	bcs.n	80005a8 <__udivmoddi4+0x2a0>
 800054a:	45b8      	cmp	r8, r7
 800054c:	d92c      	bls.n	80005a8 <__udivmoddi4+0x2a0>
 800054e:	3802      	subs	r0, #2
 8000550:	4427      	add	r7, r4
 8000552:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000556:	eba7 0708 	sub.w	r7, r7, r8
 800055a:	fba0 8902 	umull	r8, r9, r0, r2
 800055e:	454f      	cmp	r7, r9
 8000560:	46c6      	mov	lr, r8
 8000562:	4649      	mov	r1, r9
 8000564:	d31a      	bcc.n	800059c <__udivmoddi4+0x294>
 8000566:	d017      	beq.n	8000598 <__udivmoddi4+0x290>
 8000568:	b15d      	cbz	r5, 8000582 <__udivmoddi4+0x27a>
 800056a:	ebb3 020e 	subs.w	r2, r3, lr
 800056e:	eb67 0701 	sbc.w	r7, r7, r1
 8000572:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000576:	40f2      	lsrs	r2, r6
 8000578:	ea4c 0202 	orr.w	r2, ip, r2
 800057c:	40f7      	lsrs	r7, r6
 800057e:	e9c5 2700 	strd	r2, r7, [r5]
 8000582:	2600      	movs	r6, #0
 8000584:	4631      	mov	r1, r6
 8000586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e70b      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e9      	b.n	8000368 <__udivmoddi4+0x60>
 8000594:	4618      	mov	r0, r3
 8000596:	e6fd      	b.n	8000394 <__udivmoddi4+0x8c>
 8000598:	4543      	cmp	r3, r8
 800059a:	d2e5      	bcs.n	8000568 <__udivmoddi4+0x260>
 800059c:	ebb8 0e02 	subs.w	lr, r8, r2
 80005a0:	eb69 0104 	sbc.w	r1, r9, r4
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7df      	b.n	8000568 <__udivmoddi4+0x260>
 80005a8:	4608      	mov	r0, r1
 80005aa:	e7d2      	b.n	8000552 <__udivmoddi4+0x24a>
 80005ac:	4660      	mov	r0, ip
 80005ae:	e78d      	b.n	80004cc <__udivmoddi4+0x1c4>
 80005b0:	4681      	mov	r9, r0
 80005b2:	e7b9      	b.n	8000528 <__udivmoddi4+0x220>
 80005b4:	4666      	mov	r6, ip
 80005b6:	e775      	b.n	80004a4 <__udivmoddi4+0x19c>
 80005b8:	4630      	mov	r0, r6
 80005ba:	e74a      	b.n	8000452 <__udivmoddi4+0x14a>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	4439      	add	r1, r7
 80005c2:	e713      	b.n	80003ec <__udivmoddi4+0xe4>
 80005c4:	3802      	subs	r0, #2
 80005c6:	443c      	add	r4, r7
 80005c8:	e724      	b.n	8000414 <__udivmoddi4+0x10c>
 80005ca:	bf00      	nop

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 fce0 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f80a 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f952 	bl	8000884 <MX_GPIO_Init>
  MX_ETH_Init();
 80005e0:	f000 f886 	bl	80006f0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80005e4:	f000 f8d0 	bl	8000788 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80005e8:	f000 f91a 	bl	8000820 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ec:	e7fe      	b.n	80005ec <main+0x1c>
	...

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b09c      	sub	sp, #112	; 0x70
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fa:	224c      	movs	r2, #76	; 0x4c
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 fbf6 	bl	8005df0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	2220      	movs	r2, #32
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f005 fbf0 	bl	8005df0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000610:	2002      	movs	r0, #2
 8000612:	f001 fda3 	bl	800215c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000616:	2300      	movs	r3, #0
 8000618:	603b      	str	r3, [r7, #0]
 800061a:	4b33      	ldr	r3, [pc, #204]	; (80006e8 <SystemClock_Config+0xf8>)
 800061c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800061e:	4a32      	ldr	r2, [pc, #200]	; (80006e8 <SystemClock_Config+0xf8>)
 8000620:	f023 0301 	bic.w	r3, r3, #1
 8000624:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000626:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <SystemClock_Config+0xf8>)
 8000628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	603b      	str	r3, [r7, #0]
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <SystemClock_Config+0xfc>)
 8000632:	699b      	ldr	r3, [r3, #24]
 8000634:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000638:	4a2c      	ldr	r2, [pc, #176]	; (80006ec <SystemClock_Config+0xfc>)
 800063a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b2a      	ldr	r3, [pc, #168]	; (80006ec <SystemClock_Config+0xfc>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800064c:	bf00      	nop
 800064e:	4b27      	ldr	r3, [pc, #156]	; (80006ec <SystemClock_Config+0xfc>)
 8000650:	699b      	ldr	r3, [r3, #24]
 8000652:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000656:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800065a:	d1f8      	bne.n	800064e <SystemClock_Config+0x5e>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800065c:	2303      	movs	r3, #3
 800065e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000660:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000664:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000666:	2301      	movs	r3, #1
 8000668:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800066a:	2340      	movs	r3, #64	; 0x40
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066e:	2302      	movs	r3, #2
 8000670:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000672:	2302      	movs	r3, #2
 8000674:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000676:	2301      	movs	r3, #1
 8000678:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800067a:	2318      	movs	r3, #24
 800067c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800067e:	2302      	movs	r3, #2
 8000680:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000682:	2304      	movs	r3, #4
 8000684:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000686:	2302      	movs	r3, #2
 8000688:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800068a:	230c      	movs	r3, #12
 800068c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800068e:	2300      	movs	r3, #0
 8000690:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069a:	4618      	mov	r0, r3
 800069c:	f001 fda8 	bl	80021f0 <HAL_RCC_OscConfig>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80006a6:	f000 f9c9 	bl	8000a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006aa:	233f      	movs	r3, #63	; 0x3f
 80006ac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80006be:	2300      	movs	r3, #0
 80006c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2101      	movs	r1, #1
 80006ce:	4618      	mov	r0, r3
 80006d0:	f002 f99e 	bl	8002a10 <HAL_RCC_ClockConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xee>
  {
    Error_Handler();
 80006da:	f000 f9af 	bl	8000a3c <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	3770      	adds	r7, #112	; 0x70
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	58000400 	.word	0x58000400
 80006ec:	58024800 	.word	0x58024800

080006f0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80006f4:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_ETH_Init+0x80>)
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <MX_ETH_Init+0x84>)
 80006f8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80006fa:	4b1f      	ldr	r3, [pc, #124]	; (8000778 <MX_ETH_Init+0x88>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000700:	4b1d      	ldr	r3, [pc, #116]	; (8000778 <MX_ETH_Init+0x88>)
 8000702:	2280      	movs	r2, #128	; 0x80
 8000704:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000706:	4b1c      	ldr	r3, [pc, #112]	; (8000778 <MX_ETH_Init+0x88>)
 8000708:	22e1      	movs	r2, #225	; 0xe1
 800070a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800070c:	4b1a      	ldr	r3, [pc, #104]	; (8000778 <MX_ETH_Init+0x88>)
 800070e:	2200      	movs	r2, #0
 8000710:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000712:	4b19      	ldr	r3, [pc, #100]	; (8000778 <MX_ETH_Init+0x88>)
 8000714:	2200      	movs	r2, #0
 8000716:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000718:	4b17      	ldr	r3, [pc, #92]	; (8000778 <MX_ETH_Init+0x88>)
 800071a:	2200      	movs	r2, #0
 800071c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800071e:	4b14      	ldr	r3, [pc, #80]	; (8000770 <MX_ETH_Init+0x80>)
 8000720:	4a15      	ldr	r2, [pc, #84]	; (8000778 <MX_ETH_Init+0x88>)
 8000722:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000724:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_ETH_Init+0x80>)
 8000726:	2201      	movs	r2, #1
 8000728:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_ETH_Init+0x80>)
 800072c:	4a13      	ldr	r2, [pc, #76]	; (800077c <MX_ETH_Init+0x8c>)
 800072e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000730:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_ETH_Init+0x80>)
 8000732:	4a13      	ldr	r2, [pc, #76]	; (8000780 <MX_ETH_Init+0x90>)
 8000734:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000736:	4b0e      	ldr	r3, [pc, #56]	; (8000770 <MX_ETH_Init+0x80>)
 8000738:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800073c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800073e:	480c      	ldr	r0, [pc, #48]	; (8000770 <MX_ETH_Init+0x80>)
 8000740:	f000 fde4 	bl	800130c <HAL_ETH_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800074a:	f000 f977 	bl	8000a3c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800074e:	2234      	movs	r2, #52	; 0x34
 8000750:	2100      	movs	r1, #0
 8000752:	480c      	ldr	r0, [pc, #48]	; (8000784 <MX_ETH_Init+0x94>)
 8000754:	f005 fb4c 	bl	8005df0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000758:	4b0a      	ldr	r3, [pc, #40]	; (8000784 <MX_ETH_Init+0x94>)
 800075a:	2221      	movs	r2, #33	; 0x21
 800075c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800075e:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_ETH_Init+0x94>)
 8000760:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000764:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000766:	4b07      	ldr	r3, [pc, #28]	; (8000784 <MX_ETH_Init+0x94>)
 8000768:	2200      	movs	r2, #0
 800076a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	2400058c 	.word	0x2400058c
 8000774:	40028000 	.word	0x40028000
 8000778:	240000ec 	.word	0x240000ec
 800077c:	24000070 	.word	0x24000070
 8000780:	24000010 	.word	0x24000010
 8000784:	24000614 	.word	0x24000614

08000788 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800078c:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_USART3_UART_Init+0x90>)
 800078e:	4a23      	ldr	r2, [pc, #140]	; (800081c <MX_USART3_UART_Init+0x94>)
 8000790:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_USART3_UART_Init+0x90>)
 8000794:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000798:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800079a:	4b1f      	ldr	r3, [pc, #124]	; (8000818 <MX_USART3_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007a6:	4b1c      	ldr	r3, [pc, #112]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007ae:	220c      	movs	r2, #12
 80007b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b2:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007be:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ca:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007d0:	4811      	ldr	r0, [pc, #68]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007d2:	f004 f80b 	bl	80047ec <HAL_UART_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80007dc:	f000 f92e 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007e4:	f004 ff58 	bl	8005698 <HAL_UARTEx_SetTxFifoThreshold>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80007ee:	f000 f925 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f2:	2100      	movs	r1, #0
 80007f4:	4808      	ldr	r0, [pc, #32]	; (8000818 <MX_USART3_UART_Init+0x90>)
 80007f6:	f004 ff8d 	bl	8005714 <HAL_UARTEx_SetRxFifoThreshold>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000800:	f000 f91c 	bl	8000a3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000804:	4804      	ldr	r0, [pc, #16]	; (8000818 <MX_USART3_UART_Init+0x90>)
 8000806:	f004 ff0e 	bl	8005626 <HAL_UARTEx_DisableFifoMode>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000810:	f000 f914 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000814:	bf00      	nop
 8000816:	bd80      	pop	{r7, pc}
 8000818:	240000f4 	.word	0x240000f4
 800081c:	40004800 	.word	0x40004800

08000820 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000824:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000826:	4a16      	ldr	r2, [pc, #88]	; (8000880 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000828:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800082a:	4b14      	ldr	r3, [pc, #80]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800082c:	2209      	movs	r2, #9
 800082e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000830:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000832:	2202      	movs	r2, #2
 8000834:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000836:	4b11      	ldr	r3, [pc, #68]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800083e:	2202      	movs	r2, #2
 8000840:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000842:	4b0e      	ldr	r3, [pc, #56]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000844:	2201      	movs	r2, #1
 8000846:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000848:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800084a:	2200      	movs	r2, #0
 800084c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800084e:	4b0b      	ldr	r3, [pc, #44]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000850:	2200      	movs	r2, #0
 8000852:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000854:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000856:	2201      	movs	r2, #1
 8000858:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800085a:	4b08      	ldr	r3, [pc, #32]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800085c:	2201      	movs	r2, #1
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000860:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000862:	2200      	movs	r2, #0
 8000864:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000866:	4805      	ldr	r0, [pc, #20]	; (800087c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000868:	f001 fb2f 	bl	8001eca <HAL_PCD_Init>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000872:	f000 f8e3 	bl	8000a3c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	24000184 	.word	0x24000184
 8000880:	40080000 	.word	0x40080000

08000884 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08c      	sub	sp, #48	; 0x30
 8000888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 031c 	add.w	r3, r7, #28
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800089a:	4b61      	ldr	r3, [pc, #388]	; (8000a20 <MX_GPIO_Init+0x19c>)
 800089c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008a0:	4a5f      	ldr	r2, [pc, #380]	; (8000a20 <MX_GPIO_Init+0x19c>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008aa:	4b5d      	ldr	r3, [pc, #372]	; (8000a20 <MX_GPIO_Init+0x19c>)
 80008ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b0:	f003 0304 	and.w	r3, r3, #4
 80008b4:	61bb      	str	r3, [r7, #24]
 80008b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b8:	4b59      	ldr	r3, [pc, #356]	; (8000a20 <MX_GPIO_Init+0x19c>)
 80008ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008be:	4a58      	ldr	r2, [pc, #352]	; (8000a20 <MX_GPIO_Init+0x19c>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008c8:	4b55      	ldr	r3, [pc, #340]	; (8000a20 <MX_GPIO_Init+0x19c>)
 80008ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b52      	ldr	r3, [pc, #328]	; (8000a20 <MX_GPIO_Init+0x19c>)
 80008d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008dc:	4a50      	ldr	r2, [pc, #320]	; (8000a20 <MX_GPIO_Init+0x19c>)
 80008de:	f043 0301 	orr.w	r3, r3, #1
 80008e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008e6:	4b4e      	ldr	r3, [pc, #312]	; (8000a20 <MX_GPIO_Init+0x19c>)
 80008e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f4:	4b4a      	ldr	r3, [pc, #296]	; (8000a20 <MX_GPIO_Init+0x19c>)
 80008f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008fa:	4a49      	ldr	r2, [pc, #292]	; (8000a20 <MX_GPIO_Init+0x19c>)
 80008fc:	f043 0302 	orr.w	r3, r3, #2
 8000900:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000904:	4b46      	ldr	r3, [pc, #280]	; (8000a20 <MX_GPIO_Init+0x19c>)
 8000906:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800090a:	f003 0302 	and.w	r3, r3, #2
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000912:	4b43      	ldr	r3, [pc, #268]	; (8000a20 <MX_GPIO_Init+0x19c>)
 8000914:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000918:	4a41      	ldr	r2, [pc, #260]	; (8000a20 <MX_GPIO_Init+0x19c>)
 800091a:	f043 0308 	orr.w	r3, r3, #8
 800091e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000922:	4b3f      	ldr	r3, [pc, #252]	; (8000a20 <MX_GPIO_Init+0x19c>)
 8000924:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000928:	f003 0308 	and.w	r3, r3, #8
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000930:	4b3b      	ldr	r3, [pc, #236]	; (8000a20 <MX_GPIO_Init+0x19c>)
 8000932:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000936:	4a3a      	ldr	r2, [pc, #232]	; (8000a20 <MX_GPIO_Init+0x19c>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000940:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <MX_GPIO_Init+0x19c>)
 8000942:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800094e:	4b34      	ldr	r3, [pc, #208]	; (8000a20 <MX_GPIO_Init+0x19c>)
 8000950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000954:	4a32      	ldr	r2, [pc, #200]	; (8000a20 <MX_GPIO_Init+0x19c>)
 8000956:	f043 0310 	orr.w	r3, r3, #16
 800095a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800095e:	4b30      	ldr	r3, [pc, #192]	; (8000a20 <MX_GPIO_Init+0x19c>)
 8000960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000964:	f003 0310 	and.w	r3, r3, #16
 8000968:	603b      	str	r3, [r7, #0]
 800096a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 800096c:	2200      	movs	r2, #0
 800096e:	f244 0101 	movw	r1, #16385	; 0x4001
 8000972:	482c      	ldr	r0, [pc, #176]	; (8000a24 <MX_GPIO_Init+0x1a0>)
 8000974:	f001 fa90 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000978:	2200      	movs	r2, #0
 800097a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800097e:	482a      	ldr	r0, [pc, #168]	; (8000a28 <MX_GPIO_Init+0x1a4>)
 8000980:	f001 fa8a 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	2102      	movs	r1, #2
 8000988:	4828      	ldr	r0, [pc, #160]	; (8000a2c <MX_GPIO_Init+0x1a8>)
 800098a:	f001 fa85 	bl	8001e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800098e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4823      	ldr	r0, [pc, #140]	; (8000a30 <MX_GPIO_Init+0x1ac>)
 80009a4:	f001 f8c8 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 80009a8:	f244 0301 	movw	r3, #16385	; 0x4001
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4818      	ldr	r0, [pc, #96]	; (8000a24 <MX_GPIO_Init+0x1a0>)
 80009c2:	f001 f8b9 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80009c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4812      	ldr	r0, [pc, #72]	; (8000a28 <MX_GPIO_Init+0x1a4>)
 80009e0:	f001 f8aa 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_GPIO_Init+0x1b0>)
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 031c 	add.w	r3, r7, #28
 80009f4:	4619      	mov	r1, r3
 80009f6:	4810      	ldr	r0, [pc, #64]	; (8000a38 <MX_GPIO_Init+0x1b4>)
 80009f8:	f001 f89e 	bl	8001b38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	4806      	ldr	r0, [pc, #24]	; (8000a2c <MX_GPIO_Init+0x1a8>)
 8000a14:	f001 f890 	bl	8001b38 <HAL_GPIO_Init>

}
 8000a18:	bf00      	nop
 8000a1a:	3730      	adds	r7, #48	; 0x30
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	58024400 	.word	0x58024400
 8000a24:	58020400 	.word	0x58020400
 8000a28:	58020c00 	.word	0x58020c00
 8000a2c:	58021000 	.word	0x58021000
 8000a30:	58020800 	.word	0x58020800
 8000a34:	11110000 	.word	0x11110000
 8000a38:	58021800 	.word	0x58021800

08000a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a40:	b672      	cpsid	i
}
 8000a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a44:	e7fe      	b.n	8000a44 <Error_Handler+0x8>
	...

08000a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4e:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <HAL_MspInit+0x30>)
 8000a50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a54:	4a08      	ldr	r2, [pc, #32]	; (8000a78 <HAL_MspInit+0x30>)
 8000a56:	f043 0302 	orr.w	r3, r3, #2
 8000a5a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_MspInit+0x30>)
 8000a60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000a64:	f003 0302 	and.w	r3, r3, #2
 8000a68:	607b      	str	r3, [r7, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	370c      	adds	r7, #12
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	58024400 	.word	0x58024400

08000a7c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b08e      	sub	sp, #56	; 0x38
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a59      	ldr	r2, [pc, #356]	; (8000c00 <HAL_ETH_MspInit+0x184>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	f040 80ab 	bne.w	8000bf6 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000aa0:	4b58      	ldr	r3, [pc, #352]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000aa2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000aa6:	4a57      	ldr	r2, [pc, #348]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000aa8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ab0:	4b54      	ldr	r3, [pc, #336]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ab2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ab6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aba:	623b      	str	r3, [r7, #32]
 8000abc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000abe:	4b51      	ldr	r3, [pc, #324]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ac0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ac4:	4a4f      	ldr	r2, [pc, #316]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ac6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aca:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ace:	4b4d      	ldr	r3, [pc, #308]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ad0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ad4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad8:	61fb      	str	r3, [r7, #28]
 8000ada:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000adc:	4b49      	ldr	r3, [pc, #292]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ade:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ae2:	4a48      	ldr	r2, [pc, #288]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000ae4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000aec:	4b45      	ldr	r3, [pc, #276]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000aee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000af6:	61bb      	str	r3, [r7, #24]
 8000af8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000afa:	4b42      	ldr	r3, [pc, #264]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b00:	4a40      	ldr	r2, [pc, #256]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b0a:	4b3e      	ldr	r3, [pc, #248]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b10:	f003 0304 	and.w	r3, r3, #4
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b18:	4b3a      	ldr	r3, [pc, #232]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b1e:	4a39      	ldr	r2, [pc, #228]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b28:	4b36      	ldr	r3, [pc, #216]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b36:	4b33      	ldr	r3, [pc, #204]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b3c:	4a31      	ldr	r2, [pc, #196]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b3e:	f043 0302 	orr.w	r3, r3, #2
 8000b42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b46:	4b2f      	ldr	r3, [pc, #188]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b4c:	f003 0302 	and.w	r3, r3, #2
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b54:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	4a2a      	ldr	r2, [pc, #168]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b64:	4b27      	ldr	r3, [pc, #156]	; (8000c04 <HAL_ETH_MspInit+0x188>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b72:	2332      	movs	r3, #50	; 0x32
 8000b74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b76:	2302      	movs	r3, #2
 8000b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b82:	230b      	movs	r3, #11
 8000b84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	481e      	ldr	r0, [pc, #120]	; (8000c08 <HAL_ETH_MspInit+0x18c>)
 8000b8e:	f000 ffd3 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b92:	2386      	movs	r3, #134	; 0x86
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ba2:	230b      	movs	r3, #11
 8000ba4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000baa:	4619      	mov	r1, r3
 8000bac:	4817      	ldr	r0, [pc, #92]	; (8000c0c <HAL_ETH_MspInit+0x190>)
 8000bae:	f000 ffc3 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bc4:	230b      	movs	r3, #11
 8000bc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4810      	ldr	r0, [pc, #64]	; (8000c10 <HAL_ETH_MspInit+0x194>)
 8000bd0:	f000 ffb2 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bd4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000be6:	230b      	movs	r3, #11
 8000be8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4808      	ldr	r0, [pc, #32]	; (8000c14 <HAL_ETH_MspInit+0x198>)
 8000bf2:	f000 ffa1 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3738      	adds	r7, #56	; 0x38
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40028000 	.word	0x40028000
 8000c04:	58024400 	.word	0x58024400
 8000c08:	58020800 	.word	0x58020800
 8000c0c:	58020000 	.word	0x58020000
 8000c10:	58020400 	.word	0x58020400
 8000c14:	58021800 	.word	0x58021800

08000c18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b0b8      	sub	sp, #224	; 0xe0
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c20:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
 8000c28:	605a      	str	r2, [r3, #4]
 8000c2a:	609a      	str	r2, [r3, #8]
 8000c2c:	60da      	str	r2, [r3, #12]
 8000c2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c30:	f107 0310 	add.w	r3, r7, #16
 8000c34:	22bc      	movs	r2, #188	; 0xbc
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 f8d9 	bl	8005df0 <memset>
  if(huart->Instance==USART3)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a25      	ldr	r2, [pc, #148]	; (8000cd8 <HAL_UART_MspInit+0xc0>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d142      	bne.n	8000cce <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c52:	f107 0310 	add.w	r3, r7, #16
 8000c56:	4618      	mov	r0, r3
 8000c58:	f002 fa66 	bl	8003128 <HAL_RCCEx_PeriphCLKConfig>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000c62:	f7ff feeb 	bl	8000a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c6c:	4a1b      	ldr	r2, [pc, #108]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c72:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c76:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c84:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <HAL_UART_MspInit+0xc4>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	f003 0308 	and.w	r3, r3, #8
 8000c9e:	60bb      	str	r3, [r7, #8]
 8000ca0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000ca2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ca6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_UART_MspInit+0xc8>)
 8000cca:	f000 ff35 	bl	8001b38 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000cce:	bf00      	nop
 8000cd0:	37e0      	adds	r7, #224	; 0xe0
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40004800 	.word	0x40004800
 8000cdc:	58024400 	.word	0x58024400
 8000ce0:	58020c00 	.word	0x58020c00

08000ce4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b0b8      	sub	sp, #224	; 0xe0
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cfc:	f107 0310 	add.w	r3, r7, #16
 8000d00:	22bc      	movs	r2, #188	; 0xbc
 8000d02:	2100      	movs	r1, #0
 8000d04:	4618      	mov	r0, r3
 8000d06:	f005 f873 	bl	8005df0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	4a2f      	ldr	r2, [pc, #188]	; (8000dcc <HAL_PCD_MspInit+0xe8>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d156      	bne.n	8000dc2 <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000d14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000d1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000d1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d22:	f107 0310 	add.w	r3, r7, #16
 8000d26:	4618      	mov	r0, r3
 8000d28:	f002 f9fe 	bl	8003128 <HAL_RCCEx_PeriphCLKConfig>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8000d32:	f7ff fe83 	bl	8000a3c <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000d36:	f001 fa4b 	bl	80021d0 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <HAL_PCD_MspInit+0xec>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	4a23      	ldr	r2, [pc, #140]	; (8000dd0 <HAL_PCD_MspInit+0xec>)
 8000d42:	f043 0301 	orr.w	r3, r3, #1
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <HAL_PCD_MspInit+0xec>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000d58:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000d72:	230a      	movs	r3, #10
 8000d74:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d78:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4815      	ldr	r0, [pc, #84]	; (8000dd4 <HAL_PCD_MspInit+0xf0>)
 8000d80:	f000 feda 	bl	8001b38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d98:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <HAL_PCD_MspInit+0xf0>)
 8000da0:	f000 feca 	bl	8001b38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000da4:	4b0a      	ldr	r3, [pc, #40]	; (8000dd0 <HAL_PCD_MspInit+0xec>)
 8000da6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000daa:	4a09      	ldr	r2, [pc, #36]	; (8000dd0 <HAL_PCD_MspInit+0xec>)
 8000dac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000db0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_PCD_MspInit+0xec>)
 8000db6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000dba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000dc2:	bf00      	nop
 8000dc4:	37e0      	adds	r7, #224	; 0xe0
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40080000 	.word	0x40080000
 8000dd0:	58024400 	.word	0x58024400
 8000dd4:	58020000 	.word	0x58020000

08000dd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <NMI_Handler+0x4>

08000dde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <HardFault_Handler+0x4>

08000de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <MemManage_Handler+0x4>

08000dea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dee:	e7fe      	b.n	8000dee <BusFault_Handler+0x4>

08000df0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df4:	e7fe      	b.n	8000df4 <UsageFault_Handler+0x4>

08000df6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df6:	b480      	push	{r7}
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr

08000e04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e08:	bf00      	nop
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e12:	b480      	push	{r7}
 8000e14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e16:	bf00      	nop
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e24:	f000 f92a 	bl	800107c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e30:	4b39      	ldr	r3, [pc, #228]	; (8000f18 <SystemInit+0xec>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a38      	ldr	r2, [pc, #224]	; (8000f18 <SystemInit+0xec>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e40:	4b36      	ldr	r3, [pc, #216]	; (8000f1c <SystemInit+0xf0>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	2b06      	cmp	r3, #6
 8000e4a:	d807      	bhi.n	8000e5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e4c:	4b33      	ldr	r3, [pc, #204]	; (8000f1c <SystemInit+0xf0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f023 030f 	bic.w	r3, r3, #15
 8000e54:	4a31      	ldr	r2, [pc, #196]	; (8000f1c <SystemInit+0xf0>)
 8000e56:	f043 0307 	orr.w	r3, r3, #7
 8000e5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e5c:	4b30      	ldr	r3, [pc, #192]	; (8000f20 <SystemInit+0xf4>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a2f      	ldr	r2, [pc, #188]	; (8000f20 <SystemInit+0xf4>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e68:	4b2d      	ldr	r3, [pc, #180]	; (8000f20 <SystemInit+0xf4>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e6e:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <SystemInit+0xf4>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	492b      	ldr	r1, [pc, #172]	; (8000f20 <SystemInit+0xf4>)
 8000e74:	4b2b      	ldr	r3, [pc, #172]	; (8000f24 <SystemInit+0xf8>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e7a:	4b28      	ldr	r3, [pc, #160]	; (8000f1c <SystemInit+0xf0>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e86:	4b25      	ldr	r3, [pc, #148]	; (8000f1c <SystemInit+0xf0>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 030f 	bic.w	r3, r3, #15
 8000e8e:	4a23      	ldr	r2, [pc, #140]	; (8000f1c <SystemInit+0xf0>)
 8000e90:	f043 0307 	orr.w	r3, r3, #7
 8000e94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <SystemInit+0xf4>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e9c:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <SystemInit+0xf4>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ea2:	4b1f      	ldr	r3, [pc, #124]	; (8000f20 <SystemInit+0xf4>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <SystemInit+0xf4>)
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	; (8000f28 <SystemInit+0xfc>)
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eae:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <SystemInit+0xf4>)
 8000eb0:	4a1e      	ldr	r2, [pc, #120]	; (8000f2c <SystemInit+0x100>)
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <SystemInit+0xf4>)
 8000eb6:	4a1e      	ldr	r2, [pc, #120]	; (8000f30 <SystemInit+0x104>)
 8000eb8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <SystemInit+0xf4>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <SystemInit+0xf4>)
 8000ec2:	4a1b      	ldr	r2, [pc, #108]	; (8000f30 <SystemInit+0x104>)
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ec6:	4b16      	ldr	r3, [pc, #88]	; (8000f20 <SystemInit+0xf4>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ecc:	4b14      	ldr	r3, [pc, #80]	; (8000f20 <SystemInit+0xf4>)
 8000ece:	4a18      	ldr	r2, [pc, #96]	; (8000f30 <SystemInit+0x104>)
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ed2:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <SystemInit+0xf4>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	; (8000f20 <SystemInit+0xf4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a10      	ldr	r2, [pc, #64]	; (8000f20 <SystemInit+0xf4>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <SystemInit+0xf4>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <SystemInit+0x108>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <SystemInit+0x10c>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ef6:	d202      	bcs.n	8000efe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ef8:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <SystemInit+0x110>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <SystemInit+0x114>)
 8000f00:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f04:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f06:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <SystemInit+0xec>)
 8000f08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f0c:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	e000ed00 	.word	0xe000ed00
 8000f1c:	52002000 	.word	0x52002000
 8000f20:	58024400 	.word	0x58024400
 8000f24:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f28:	02020200 	.word	0x02020200
 8000f2c:	01ff0000 	.word	0x01ff0000
 8000f30:	01010280 	.word	0x01010280
 8000f34:	5c001000 	.word	0x5c001000
 8000f38:	ffff0000 	.word	0xffff0000
 8000f3c:	51008108 	.word	0x51008108
 8000f40:	52004000 	.word	0x52004000

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f48:	f7ff ff70 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f64:	4c0a      	ldr	r4, [pc, #40]	; (8000f90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f72:	f004 ff19 	bl	8005da8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f76:	f7ff fb2b 	bl	80005d0 <main>
  bx  lr
 8000f7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f7c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f80:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f84:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f88:	08005e60 	.word	0x08005e60
  ldr r2, =_sbss
 8000f8c:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000f90:	2400064c 	.word	0x2400064c

08000f94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC3_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	f000 f982 	bl	80012a8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000fa4:	f001 feea 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <HAL_Init+0x68>)
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	0a1b      	lsrs	r3, r3, #8
 8000fb0:	f003 030f 	and.w	r3, r3, #15
 8000fb4:	4913      	ldr	r1, [pc, #76]	; (8001004 <HAL_Init+0x6c>)
 8000fb6:	5ccb      	ldrb	r3, [r1, r3]
 8000fb8:	f003 031f 	and.w	r3, r3, #31
 8000fbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fc0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fc2:	4b0f      	ldr	r3, [pc, #60]	; (8001000 <HAL_Init+0x68>)
 8000fc4:	699b      	ldr	r3, [r3, #24]
 8000fc6:	f003 030f 	and.w	r3, r3, #15
 8000fca:	4a0e      	ldr	r2, [pc, #56]	; (8001004 <HAL_Init+0x6c>)
 8000fcc:	5cd3      	ldrb	r3, [r2, r3]
 8000fce:	f003 031f 	and.w	r3, r3, #31
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd8:	4a0b      	ldr	r2, [pc, #44]	; (8001008 <HAL_Init+0x70>)
 8000fda:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fdc:	4a0b      	ldr	r2, [pc, #44]	; (800100c <HAL_Init+0x74>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fe2:	2000      	movs	r0, #0
 8000fe4:	f000 f814 	bl	8001010 <HAL_InitTick>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	e002      	b.n	8000ff8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff2:	f7ff fd29 	bl	8000a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	58024400 	.word	0x58024400
 8001004:	08005e18 	.word	0x08005e18
 8001008:	24000004 	.word	0x24000004
 800100c:	24000000 	.word	0x24000000

08001010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <HAL_InitTick+0x60>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d101      	bne.n	8001024 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e021      	b.n	8001068 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_InitTick+0x64>)
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <HAL_InitTick+0x60>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	4619      	mov	r1, r3
 800102e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001032:	fbb3 f3f1 	udiv	r3, r3, r1
 8001036:	fbb2 f3f3 	udiv	r3, r2, r3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 f959 	bl	80012f2 <HAL_SYSTICK_Config>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e00e      	b.n	8001068 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2b0f      	cmp	r3, #15
 800104e:	d80a      	bhi.n	8001066 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001050:	2200      	movs	r2, #0
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	f04f 30ff 	mov.w	r0, #4294967295
 8001058:	f000 f931 	bl	80012be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800105c:	4a06      	ldr	r2, [pc, #24]	; (8001078 <HAL_InitTick+0x68>)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	e000      	b.n	8001068 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	2400000c 	.word	0x2400000c
 8001074:	24000000 	.word	0x24000000
 8001078:	24000008 	.word	0x24000008

0800107c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001080:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_IncTick+0x20>)
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x24>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4413      	add	r3, r2
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <HAL_IncTick+0x24>)
 800108e:	6013      	str	r3, [r2, #0]
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	2400000c 	.word	0x2400000c
 80010a0:	24000648 	.word	0x24000648

080010a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return uwTick;
 80010a8:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <HAL_GetTick+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	24000648 	.word	0x24000648

080010bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010c4:	f7ff ffee 	bl	80010a4 <HAL_GetTick>
 80010c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010d4:	d005      	beq.n	80010e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010d6:	4b0a      	ldr	r3, [pc, #40]	; (8001100 <HAL_Delay+0x44>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4413      	add	r3, r2
 80010e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010e2:	bf00      	nop
 80010e4:	f7ff ffde 	bl	80010a4 <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d8f7      	bhi.n	80010e4 <HAL_Delay+0x28>
  {
  }
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	2400000c 	.word	0x2400000c

08001104 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001108:	4b03      	ldr	r3, [pc, #12]	; (8001118 <HAL_GetREVID+0x14>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	0c1b      	lsrs	r3, r3, #16
}
 800110e:	4618      	mov	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	5c001000 	.word	0x5c001000

0800111c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800112c:	4904      	ldr	r1, [pc, #16]	; (8001140 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4313      	orrs	r3, r2
 8001132:	604b      	str	r3, [r1, #4]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	58000400 	.word	0x58000400

08001144 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <__NVIC_SetPriorityGrouping+0x40>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001160:	4013      	ands	r3, r2
 8001162:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800116c:	4b06      	ldr	r3, [pc, #24]	; (8001188 <__NVIC_SetPriorityGrouping+0x44>)
 800116e:	4313      	orrs	r3, r2
 8001170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001172:	4a04      	ldr	r2, [pc, #16]	; (8001184 <__NVIC_SetPriorityGrouping+0x40>)
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	60d3      	str	r3, [r2, #12]
}
 8001178:	bf00      	nop
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00
 8001188:	05fa0000 	.word	0x05fa0000

0800118c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001190:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001192:	68db      	ldr	r3, [r3, #12]
 8001194:	0a1b      	lsrs	r3, r3, #8
 8001196:	f003 0307 	and.w	r3, r3, #7
}
 800119a:	4618      	mov	r0, r3
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	db0a      	blt.n	80011d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	b2da      	uxtb	r2, r3
 80011c0:	490c      	ldr	r1, [pc, #48]	; (80011f4 <__NVIC_SetPriority+0x4c>)
 80011c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c6:	0112      	lsls	r2, r2, #4
 80011c8:	b2d2      	uxtb	r2, r2
 80011ca:	440b      	add	r3, r1
 80011cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011d0:	e00a      	b.n	80011e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4908      	ldr	r1, [pc, #32]	; (80011f8 <__NVIC_SetPriority+0x50>)
 80011d8:	88fb      	ldrh	r3, [r7, #6]
 80011da:	f003 030f 	and.w	r3, r3, #15
 80011de:	3b04      	subs	r3, #4
 80011e0:	0112      	lsls	r2, r2, #4
 80011e2:	b2d2      	uxtb	r2, r2
 80011e4:	440b      	add	r3, r1
 80011e6:	761a      	strb	r2, [r3, #24]
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000e100 	.word	0xe000e100
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b089      	sub	sp, #36	; 0x24
 8001200:	af00      	add	r7, sp, #0
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	60b9      	str	r1, [r7, #8]
 8001206:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	f1c3 0307 	rsb	r3, r3, #7
 8001216:	2b04      	cmp	r3, #4
 8001218:	bf28      	it	cs
 800121a:	2304      	movcs	r3, #4
 800121c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3304      	adds	r3, #4
 8001222:	2b06      	cmp	r3, #6
 8001224:	d902      	bls.n	800122c <NVIC_EncodePriority+0x30>
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3b03      	subs	r3, #3
 800122a:	e000      	b.n	800122e <NVIC_EncodePriority+0x32>
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	f04f 32ff 	mov.w	r2, #4294967295
 8001234:	69bb      	ldr	r3, [r7, #24]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43da      	mvns	r2, r3
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	401a      	ands	r2, r3
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001244:	f04f 31ff 	mov.w	r1, #4294967295
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43d9      	mvns	r1, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001254:	4313      	orrs	r3, r2
         );
}
 8001256:	4618      	mov	r0, r3
 8001258:	3724      	adds	r7, #36	; 0x24
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3b01      	subs	r3, #1
 8001270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001274:	d301      	bcc.n	800127a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001276:	2301      	movs	r3, #1
 8001278:	e00f      	b.n	800129a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <SysTick_Config+0x40>)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001282:	210f      	movs	r1, #15
 8001284:	f04f 30ff 	mov.w	r0, #4294967295
 8001288:	f7ff ff8e 	bl	80011a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <SysTick_Config+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <SysTick_Config+0x40>)
 8001294:	2207      	movs	r2, #7
 8001296:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	e000e010 	.word	0xe000e010

080012a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff ff47 	bl	8001144 <__NVIC_SetPriorityGrouping>
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	4603      	mov	r3, r0
 80012c6:	60b9      	str	r1, [r7, #8]
 80012c8:	607a      	str	r2, [r7, #4]
 80012ca:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012cc:	f7ff ff5e 	bl	800118c <__NVIC_GetPriorityGrouping>
 80012d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	68b9      	ldr	r1, [r7, #8]
 80012d6:	6978      	ldr	r0, [r7, #20]
 80012d8:	f7ff ff90 	bl	80011fc <NVIC_EncodePriority>
 80012dc:	4602      	mov	r2, r0
 80012de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff5f 	bl	80011a8 <__NVIC_SetPriority>
}
 80012ea:	bf00      	nop
 80012ec:	3718      	adds	r7, #24
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffb2 	bl	8001264 <SysTick_Config>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d101      	bne.n	800131e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e0c6      	b.n	80014ac <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fba8 	bl	8000a7c <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2223      	movs	r2, #35	; 0x23
 8001330:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	4b60      	ldr	r3, [pc, #384]	; (80014b4 <HAL_ETH_Init+0x1a8>)
 8001334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001338:	4a5e      	ldr	r2, [pc, #376]	; (80014b4 <HAL_ETH_Init+0x1a8>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001342:	4b5c      	ldr	r3, [pc, #368]	; (80014b4 <HAL_ETH_Init+0x1a8>)
 8001344:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	7a1b      	ldrb	r3, [r3, #8]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d103      	bne.n	8001360 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001358:	2000      	movs	r0, #0
 800135a:	f7ff fedf 	bl	800111c <HAL_SYSCFG_ETHInterfaceSelect>
 800135e:	e003      	b.n	8001368 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001360:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001364:	f7ff feda 	bl	800111c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f042 0201 	orr.w	r2, r2, #1
 800137a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800137e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001380:	f7ff fe90 	bl	80010a4 <HAL_GetTick>
 8001384:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001386:	e00f      	b.n	80013a8 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001388:	f7ff fe8c 	bl	80010a4 <HAL_GetTick>
 800138c:	4602      	mov	r2, r0
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001396:	d907      	bls.n	80013a8 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2204      	movs	r2, #4
 800139c:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	22e0      	movs	r2, #224	; 0xe0
 80013a2:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e081      	b.n	80014ac <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0301 	and.w	r3, r3, #1
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d1e6      	bne.n	8001388 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fac0 	bl	8001940 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80013c0:	f001 fe56 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 80013c4:	4603      	mov	r3, r0
 80013c6:	4a3c      	ldr	r2, [pc, #240]	; (80014b8 <HAL_ETH_Init+0x1ac>)
 80013c8:	fba2 2303 	umull	r2, r3, r2, r3
 80013cc:	0c9a      	lsrs	r2, r3, #18
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	3a01      	subs	r2, #1
 80013d4:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 fa13 	bl	8001804 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80013f4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80013f8:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	695b      	ldr	r3, [r3, #20]
 80013fe:	f003 0303 	and.w	r3, r3, #3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d007      	beq.n	8001416 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	22e0      	movs	r2, #224	; 0xe0
 8001410:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e04a      	b.n	80014ac <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	f241 1308 	movw	r3, #4360	; 0x1108
 800141e:	4413      	add	r3, r2
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <HAL_ETH_Init+0x1b0>)
 8001424:	4013      	ands	r3, r2
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6952      	ldr	r2, [r2, #20]
 800142a:	0052      	lsls	r2, r2, #1
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	6809      	ldr	r1, [r1, #0]
 8001430:	431a      	orrs	r2, r3
 8001432:	f241 1308 	movw	r3, #4360	; 0x1108
 8001436:	440b      	add	r3, r1
 8001438:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fad8 	bl	80019f0 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 fb1c 	bl	8001a7e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	3305      	adds	r3, #5
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	021a      	lsls	r2, r3, #8
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	3304      	adds	r3, #4
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	3303      	adds	r3, #3
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	061a      	lsls	r2, r3, #24
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	3302      	adds	r3, #2
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	041b      	lsls	r3, r3, #16
 8001478:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	3301      	adds	r3, #1
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001484:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001492:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001494:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2200      	movs	r2, #0
 800149c:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	2210      	movs	r2, #16
 80014a2:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2210      	movs	r2, #16
 80014a8:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80014aa:	2300      	movs	r3, #0
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3710      	adds	r7, #16
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	58024400 	.word	0x58024400
 80014b8:	431bde83 	.word	0x431bde83
 80014bc:	ffff8001 	.word	0xffff8001

080014c0 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b085      	sub	sp, #20
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80014d2:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	791b      	ldrb	r3, [r3, #4]
 80014d8:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 80014da:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	7b1b      	ldrb	r3, [r3, #12]
 80014e0:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80014e2:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	7b5b      	ldrb	r3, [r3, #13]
 80014e8:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80014ea:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	7b9b      	ldrb	r3, [r3, #14]
 80014f0:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 80014f2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	7bdb      	ldrb	r3, [r3, #15]
 80014f8:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80014fa:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	7c12      	ldrb	r2, [r2, #16]
 8001500:	2a00      	cmp	r2, #0
 8001502:	d102      	bne.n	800150a <ETH_SetMACConfig+0x4a>
 8001504:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001508:	e000      	b.n	800150c <ETH_SetMACConfig+0x4c>
 800150a:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800150c:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	7c52      	ldrb	r2, [r2, #17]
 8001512:	2a00      	cmp	r2, #0
 8001514:	d102      	bne.n	800151c <ETH_SetMACConfig+0x5c>
 8001516:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800151a:	e000      	b.n	800151e <ETH_SetMACConfig+0x5e>
 800151c:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800151e:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	7c9b      	ldrb	r3, [r3, #18]
 8001524:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001526:	431a      	orrs	r2, r3
                                macconf->Speed |
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 800152c:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 8001532:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	7f1b      	ldrb	r3, [r3, #28]
 8001538:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 800153a:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	7f5b      	ldrb	r3, [r3, #29]
 8001540:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8001542:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8001544:	683a      	ldr	r2, [r7, #0]
 8001546:	7f92      	ldrb	r2, [r2, #30]
 8001548:	2a00      	cmp	r2, #0
 800154a:	d102      	bne.n	8001552 <ETH_SetMACConfig+0x92>
 800154c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001550:	e000      	b.n	8001554 <ETH_SetMACConfig+0x94>
 8001552:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8001554:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	7fdb      	ldrb	r3, [r3, #31]
 800155a:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800155c:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800155e:	683a      	ldr	r2, [r7, #0]
 8001560:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001564:	2a00      	cmp	r2, #0
 8001566:	d102      	bne.n	800156e <ETH_SetMACConfig+0xae>
 8001568:	f44f 7280 	mov.w	r2, #256	; 0x100
 800156c:	e000      	b.n	8001570 <ETH_SetMACConfig+0xb0>
 800156e:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8001570:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8001576:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800157e:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 8001580:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 8001586:	4313      	orrs	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b56      	ldr	r3, [pc, #344]	; (80016ec <ETH_SetMACConfig+0x22c>)
 8001592:	4013      	ands	r3, r2
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	6812      	ldr	r2, [r2, #0]
 8001598:	68f9      	ldr	r1, [r7, #12]
 800159a:	430b      	orrs	r3, r1
 800159c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015a2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80015aa:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80015ac:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015b4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80015b6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80015be:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80015c0:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80015c2:	683a      	ldr	r2, [r7, #0]
 80015c4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	d102      	bne.n	80015d2 <ETH_SetMACConfig+0x112>
 80015cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015d0:	e000      	b.n	80015d4 <ETH_SetMACConfig+0x114>
 80015d2:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80015d4:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80015da:	4313      	orrs	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	685a      	ldr	r2, [r3, #4]
 80015e4:	4b42      	ldr	r3, [pc, #264]	; (80016f0 <ETH_SetMACConfig+0x230>)
 80015e6:	4013      	ands	r3, r2
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	6812      	ldr	r2, [r2, #0]
 80015ec:	68f9      	ldr	r1, [r7, #12]
 80015ee:	430b      	orrs	r3, r1
 80015f0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015f8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80015fe:	4313      	orrs	r3, r2
 8001600:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	68da      	ldr	r2, [r3, #12]
 8001608:	4b3a      	ldr	r3, [pc, #232]	; (80016f4 <ETH_SetMACConfig+0x234>)
 800160a:	4013      	ands	r3, r2
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	68f9      	ldr	r1, [r7, #12]
 8001612:	430b      	orrs	r3, r1
 8001614:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800161c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001622:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8001624:	683a      	ldr	r2, [r7, #0]
 8001626:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800162a:	2a00      	cmp	r2, #0
 800162c:	d101      	bne.n	8001632 <ETH_SetMACConfig+0x172>
 800162e:	2280      	movs	r2, #128	; 0x80
 8001630:	e000      	b.n	8001634 <ETH_SetMACConfig+0x174>
 8001632:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001634:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800163c:	4313      	orrs	r3, r2
 800163e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001646:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800164a:	4013      	ands	r3, r2
 800164c:	687a      	ldr	r2, [r7, #4]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	68f9      	ldr	r1, [r7, #12]
 8001652:	430b      	orrs	r3, r1
 8001654:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800165c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001664:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001666:	4313      	orrs	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001672:	f023 0103 	bic.w	r1, r3, #3
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	430a      	orrs	r2, r1
 800167e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800168a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	430a      	orrs	r2, r1
 8001698:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80016a0:	683a      	ldr	r2, [r7, #0]
 80016a2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80016a6:	2a00      	cmp	r2, #0
 80016a8:	d101      	bne.n	80016ae <ETH_SetMACConfig+0x1ee>
 80016aa:	2240      	movs	r2, #64	; 0x40
 80016ac:	e000      	b.n	80016b0 <ETH_SetMACConfig+0x1f0>
 80016ae:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80016b0:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80016b8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80016ba:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80016c2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80016c4:	4313      	orrs	r3, r2
 80016c6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80016d0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	68fa      	ldr	r2, [r7, #12]
 80016da:	430a      	orrs	r2, r1
 80016dc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	00048083 	.word	0x00048083
 80016f0:	c0f88000 	.word	0xc0f88000
 80016f4:	fffffef0 	.word	0xfffffef0

080016f8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b085      	sub	sp, #20
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
 8001700:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b38      	ldr	r3, [pc, #224]	; (80017f0 <ETH_SetDMAConfig+0xf8>)
 800170e:	4013      	ands	r3, r2
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	6812      	ldr	r2, [r2, #0]
 8001714:	6879      	ldr	r1, [r7, #4]
 8001716:	6809      	ldr	r1, [r1, #0]
 8001718:	431a      	orrs	r2, r3
 800171a:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800171e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	791b      	ldrb	r3, [r3, #4]
 8001724:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800172a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	7b1b      	ldrb	r3, [r3, #12]
 8001730:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001732:	4313      	orrs	r3, r2
 8001734:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	f241 0304 	movw	r3, #4100	; 0x1004
 800173e:	4413      	add	r3, r2
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <ETH_SetDMAConfig+0xfc>)
 8001744:	4013      	ands	r3, r2
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	6811      	ldr	r1, [r2, #0]
 800174a:	68fa      	ldr	r2, [r7, #12]
 800174c:	431a      	orrs	r2, r3
 800174e:	f241 0304 	movw	r3, #4100	; 0x1004
 8001752:	440b      	add	r3, r1
 8001754:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	7b5b      	ldrb	r3, [r3, #13]
 800175a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <ETH_SetDMAConfig+0x100>)
 8001770:	4013      	ands	r3, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6811      	ldr	r1, [r2, #0]
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	431a      	orrs	r2, r3
 800177a:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 800177e:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	7d1b      	ldrb	r3, [r3, #20]
 8001788:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800178a:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	7f5b      	ldrb	r3, [r3, #29]
 8001790:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001792:	4313      	orrs	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	f241 1304 	movw	r3, #4356	; 0x1104
 800179e:	4413      	add	r3, r2
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	4b16      	ldr	r3, [pc, #88]	; (80017fc <ETH_SetDMAConfig+0x104>)
 80017a4:	4013      	ands	r3, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6811      	ldr	r1, [r2, #0]
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	431a      	orrs	r2, r3
 80017ae:	f241 1304 	movw	r3, #4356	; 0x1104
 80017b2:	440b      	add	r3, r1
 80017b4:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	7f1b      	ldrb	r3, [r3, #28]
 80017ba:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80017c0:	4313      	orrs	r3, r2
 80017c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	f241 1308 	movw	r3, #4360	; 0x1108
 80017cc:	4413      	add	r3, r2
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b0b      	ldr	r3, [pc, #44]	; (8001800 <ETH_SetDMAConfig+0x108>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	6811      	ldr	r1, [r2, #0]
 80017d8:	68fa      	ldr	r2, [r7, #12]
 80017da:	431a      	orrs	r2, r3
 80017dc:	f241 1308 	movw	r3, #4360	; 0x1108
 80017e0:	440b      	add	r3, r1
 80017e2:	601a      	str	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr
 80017f0:	ffff87fd 	.word	0xffff87fd
 80017f4:	ffff2ffe 	.word	0xffff2ffe
 80017f8:	fffec000 	.word	0xfffec000
 80017fc:	ffc0efef 	.word	0xffc0efef
 8001800:	7fc0ffff 	.word	0x7fc0ffff

08001804 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b0a4      	sub	sp, #144	; 0x90
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800180c:	2301      	movs	r3, #1
 800180e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001812:	2300      	movs	r3, #0
 8001814:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001816:	2300      	movs	r3, #0
 8001818:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001822:	2301      	movs	r3, #1
 8001824:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001828:	2301      	movs	r3, #1
 800182a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800182e:	2301      	movs	r3, #1
 8001830:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800183a:	2301      	movs	r3, #1
 800183c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001844:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001846:	2300      	movs	r3, #0
 8001848:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800184c:	2300      	movs	r3, #0
 800184e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001856:	2300      	movs	r3, #0
 8001858:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800185c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001860:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001862:	2300      	movs	r3, #0
 8001864:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001868:	2300      	movs	r3, #0
 800186a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800186c:	2301      	movs	r3, #1
 800186e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001878:	2300      	movs	r3, #0
 800187a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800187e:	2300      	movs	r3, #0
 8001880:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001882:	2300      	movs	r3, #0
 8001884:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001886:	2300      	movs	r3, #0
 8001888:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800188a:	2300      	movs	r3, #0
 800188c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001896:	2301      	movs	r3, #1
 8001898:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800189c:	2320      	movs	r3, #32
 800189e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80018a2:	2301      	movs	r3, #1
 80018a4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80018a8:	2300      	movs	r3, #0
 80018aa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80018ae:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80018b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80018ba:	2300      	movs	r3, #0
 80018bc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80018c0:	2302      	movs	r3, #2
 80018c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80018c6:	2300      	movs	r3, #0
 80018c8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80018d2:	2300      	movs	r3, #0
 80018d4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80018d8:	2301      	movs	r3, #1
 80018da:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80018de:	2300      	movs	r3, #0
 80018e0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80018e2:	2301      	movs	r3, #1
 80018e4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80018e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ec:	4619      	mov	r1, r3
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f7ff fde6 	bl	80014c0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018f4:	2301      	movs	r3, #1
 80018f6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80018f8:	2301      	movs	r3, #1
 80018fa:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001900:	2300      	movs	r3, #0
 8001902:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800190a:	2300      	movs	r3, #0
 800190c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800190e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001912:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001918:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800191c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800191e:	2300      	movs	r3, #0
 8001920:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8001924:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001928:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800192a:	f107 0308 	add.w	r3, r7, #8
 800192e:	4619      	mov	r1, r3
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff fee1 	bl	80016f8 <ETH_SetDMAConfig>
}
 8001936:	bf00      	nop
 8001938:	3790      	adds	r7, #144	; 0x90
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
	...

08001940 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001950:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001958:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800195a:	f001 fb89 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 800195e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	4a1e      	ldr	r2, [pc, #120]	; (80019dc <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d908      	bls.n	800197a <ETH_MAC_MDIO_ClkConfig+0x3a>
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	4a1d      	ldr	r2, [pc, #116]	; (80019e0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d804      	bhi.n	800197a <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001976:	60fb      	str	r3, [r7, #12]
 8001978:	e027      	b.n	80019ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d908      	bls.n	8001994 <ETH_MAC_MDIO_ClkConfig+0x54>
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	4a17      	ldr	r2, [pc, #92]	; (80019e4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d204      	bcs.n	8001994 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001990:	60fb      	str	r3, [r7, #12]
 8001992:	e01a      	b.n	80019ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4a13      	ldr	r2, [pc, #76]	; (80019e4 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d303      	bcc.n	80019a4 <ETH_MAC_MDIO_ClkConfig+0x64>
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	4a12      	ldr	r2, [pc, #72]	; (80019e8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d911      	bls.n	80019c8 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	4a10      	ldr	r2, [pc, #64]	; (80019e8 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d908      	bls.n	80019be <ETH_MAC_MDIO_ClkConfig+0x7e>
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <ETH_MAC_MDIO_ClkConfig+0xac>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d804      	bhi.n	80019be <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	e005      	b.n	80019ca <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	e000      	b.n	80019ca <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80019c8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	68fa      	ldr	r2, [r7, #12]
 80019d0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80019d4:	bf00      	nop
 80019d6:	3710      	adds	r7, #16
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	01312cff 	.word	0x01312cff
 80019e0:	02160ebf 	.word	0x02160ebf
 80019e4:	03938700 	.word	0x03938700
 80019e8:	05f5e0ff 	.word	0x05f5e0ff
 80019ec:	08f0d17f 	.word	0x08f0d17f

080019f0 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019f8:	2300      	movs	r3, #0
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	e01d      	b.n	8001a3a <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68d9      	ldr	r1, [r3, #12]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	4613      	mov	r3, r2
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	4413      	add	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	440b      	add	r3, r1
 8001a0e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2200      	movs	r2, #0
 8001a14:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	3206      	adds	r2, #6
 8001a30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3301      	adds	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b03      	cmp	r3, #3
 8001a3e:	d9de      	bls.n	80019fe <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681a      	ldr	r2, [r3, #0]
 8001a4a:	f241 132c 	movw	r3, #4396	; 0x112c
 8001a4e:	4413      	add	r3, r2
 8001a50:	2203      	movs	r2, #3
 8001a52:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68d9      	ldr	r1, [r3, #12]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	f241 1314 	movw	r3, #4372	; 0x1114
 8001a60:	4413      	add	r3, r2
 8001a62:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68da      	ldr	r2, [r3, #12]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8001a70:	601a      	str	r2, [r3, #0]
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	b085      	sub	sp, #20
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	e024      	b.n	8001ad6 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6919      	ldr	r1, [r3, #16]
 8001a90:	68fa      	ldr	r2, [r7, #12]
 8001a92:	4613      	mov	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	00db      	lsls	r3, r3, #3
 8001a9a:	440b      	add	r3, r1
 8001a9c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	2200      	movs	r2, #0
 8001aae:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	3310      	adds	r3, #16
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	440b      	add	r3, r1
 8001ace:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b03      	cmp	r3, #3
 8001ada:	d9d7      	bls.n	8001a8c <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	f241 1330 	movw	r3, #4400	; 0x1130
 8001b02:	4413      	add	r3, r2
 8001b04:	2203      	movs	r2, #3
 8001b06:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6919      	ldr	r1, [r3, #16]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	f241 131c 	movw	r3, #4380	; 0x111c
 8001b14:	4413      	add	r3, r2
 8001b16:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	f241 1328 	movw	r3, #4392	; 0x1128
 8001b28:	4413      	add	r3, r2
 8001b2a:	6019      	str	r1, [r3, #0]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b42:	2300      	movs	r3, #0
 8001b44:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b46:	4b89      	ldr	r3, [pc, #548]	; (8001d6c <HAL_GPIO_Init+0x234>)
 8001b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b4a:	e194      	b.n	8001e76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2101      	movs	r1, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 8186 	beq.w	8001e70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d00b      	beq.n	8001b84 <HAL_GPIO_Init+0x4c>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d007      	beq.n	8001b84 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b78:	2b11      	cmp	r3, #17
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	2b12      	cmp	r3, #18
 8001b82:	d130      	bne.n	8001be6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	2203      	movs	r2, #3
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bba:	2201      	movs	r2, #1
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43db      	mvns	r3, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	091b      	lsrs	r3, r3, #4
 8001bd0:	f003 0201 	and.w	r2, r3, #1
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	68db      	ldr	r3, [r3, #12]
 8001bea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	2203      	movs	r2, #3
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	005b      	lsls	r3, r3, #1
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0xee>
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b12      	cmp	r3, #18
 8001c24:	d123      	bne.n	8001c6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	69b9      	ldr	r1, [r7, #24]
 8001c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0203 	and.w	r2, r3, #3
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 80e0 	beq.w	8001e70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb0:	4b2f      	ldr	r3, [pc, #188]	; (8001d70 <HAL_GPIO_Init+0x238>)
 8001cb2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cb6:	4a2e      	ldr	r2, [pc, #184]	; (8001d70 <HAL_GPIO_Init+0x238>)
 8001cb8:	f043 0302 	orr.w	r3, r3, #2
 8001cbc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cc0:	4b2b      	ldr	r3, [pc, #172]	; (8001d70 <HAL_GPIO_Init+0x238>)
 8001cc2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cce:	4a29      	ldr	r2, [pc, #164]	; (8001d74 <HAL_GPIO_Init+0x23c>)
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	089b      	lsrs	r3, r3, #2
 8001cd4:	3302      	adds	r3, #2
 8001cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	220f      	movs	r2, #15
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	43db      	mvns	r3, r3
 8001cec:	69ba      	ldr	r2, [r7, #24]
 8001cee:	4013      	ands	r3, r2
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a20      	ldr	r2, [pc, #128]	; (8001d78 <HAL_GPIO_Init+0x240>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d052      	beq.n	8001da0 <HAL_GPIO_Init+0x268>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	4a1f      	ldr	r2, [pc, #124]	; (8001d7c <HAL_GPIO_Init+0x244>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d031      	beq.n	8001d66 <HAL_GPIO_Init+0x22e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	4a1e      	ldr	r2, [pc, #120]	; (8001d80 <HAL_GPIO_Init+0x248>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d02b      	beq.n	8001d62 <HAL_GPIO_Init+0x22a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a1d      	ldr	r2, [pc, #116]	; (8001d84 <HAL_GPIO_Init+0x24c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d025      	beq.n	8001d5e <HAL_GPIO_Init+0x226>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a1c      	ldr	r2, [pc, #112]	; (8001d88 <HAL_GPIO_Init+0x250>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01f      	beq.n	8001d5a <HAL_GPIO_Init+0x222>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a1b      	ldr	r2, [pc, #108]	; (8001d8c <HAL_GPIO_Init+0x254>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d019      	beq.n	8001d56 <HAL_GPIO_Init+0x21e>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a1a      	ldr	r2, [pc, #104]	; (8001d90 <HAL_GPIO_Init+0x258>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x21a>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_GPIO_Init+0x25c>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x216>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a18      	ldr	r2, [pc, #96]	; (8001d98 <HAL_GPIO_Init+0x260>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x212>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a17      	ldr	r2, [pc, #92]	; (8001d9c <HAL_GPIO_Init+0x264>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x20e>
 8001d42:	2309      	movs	r3, #9
 8001d44:	e02d      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d46:	230a      	movs	r3, #10
 8001d48:	e02b      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	e029      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d4e:	2307      	movs	r3, #7
 8001d50:	e027      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d52:	2306      	movs	r3, #6
 8001d54:	e025      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d56:	2305      	movs	r3, #5
 8001d58:	e023      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d5a:	2304      	movs	r3, #4
 8001d5c:	e021      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e01f      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d62:	2302      	movs	r3, #2
 8001d64:	e01d      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d66:	2301      	movs	r3, #1
 8001d68:	e01b      	b.n	8001da2 <HAL_GPIO_Init+0x26a>
 8001d6a:	bf00      	nop
 8001d6c:	58000080 	.word	0x58000080
 8001d70:	58024400 	.word	0x58024400
 8001d74:	58000400 	.word	0x58000400
 8001d78:	58020000 	.word	0x58020000
 8001d7c:	58020400 	.word	0x58020400
 8001d80:	58020800 	.word	0x58020800
 8001d84:	58020c00 	.word	0x58020c00
 8001d88:	58021000 	.word	0x58021000
 8001d8c:	58021400 	.word	0x58021400
 8001d90:	58021800 	.word	0x58021800
 8001d94:	58021c00 	.word	0x58021c00
 8001d98:	58022000 	.word	0x58022000
 8001d9c:	58022400 	.word	0x58022400
 8001da0:	2300      	movs	r3, #0
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	f002 0203 	and.w	r2, r2, #3
 8001da8:	0092      	lsls	r2, r2, #2
 8001daa:	4093      	lsls	r3, r2
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db2:	4938      	ldr	r1, [pc, #224]	; (8001e94 <HAL_GPIO_Init+0x35c>)
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	089b      	lsrs	r3, r3, #2
 8001db8:	3302      	adds	r3, #2
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	4013      	ands	r3, r2
 8001df8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4313      	orrs	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001e3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001e42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	3301      	adds	r3, #1
 8001e74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	f47f ae63 	bne.w	8001b4c <HAL_GPIO_Init+0x14>
  }
}
 8001e86:	bf00      	nop
 8001e88:	bf00      	nop
 8001e8a:	3724      	adds	r7, #36	; 0x24
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	58000400 	.word	0x58000400

08001e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	807b      	strh	r3, [r7, #2]
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ea8:	787b      	ldrb	r3, [r7, #1]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d003      	beq.n	8001eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eae:	887a      	ldrh	r2, [r7, #2]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001eb4:	e003      	b.n	8001ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001eb6:	887b      	ldrh	r3, [r7, #2]
 8001eb8:	041a      	lsls	r2, r3, #16
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	619a      	str	r2, [r3, #24]
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001eca:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ecc:	b08f      	sub	sp, #60	; 0x3c
 8001ece:	af0a      	add	r7, sp, #40	; 0x28
 8001ed0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e116      	b.n	800210a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d106      	bne.n	8001efc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7fe fef4 	bl	8000ce4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2203      	movs	r2, #3
 8001f00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 fcf4 	bl	8005908 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	687e      	ldr	r6, [r7, #4]
 8001f28:	466d      	mov	r5, sp
 8001f2a:	f106 0410 	add.w	r4, r6, #16
 8001f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f3e:	1d33      	adds	r3, r6, #4
 8001f40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f42:	6838      	ldr	r0, [r7, #0]
 8001f44:	f003 fc72 	bl	800582c <USB_CoreInit>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2202      	movs	r2, #2
 8001f52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e0d7      	b.n	800210a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4618      	mov	r0, r3
 8001f62:	f003 fce2 	bl	800592a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f66:	2300      	movs	r3, #0
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	e04a      	b.n	8002002 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f6c:	7bfa      	ldrb	r2, [r7, #15]
 8001f6e:	6879      	ldr	r1, [r7, #4]
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	1a9b      	subs	r3, r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	440b      	add	r3, r1
 8001f7a:	333d      	adds	r3, #61	; 0x3d
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f80:	7bfa      	ldrb	r2, [r7, #15]
 8001f82:	6879      	ldr	r1, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	00db      	lsls	r3, r3, #3
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	333c      	adds	r3, #60	; 0x3c
 8001f90:	7bfa      	ldrb	r2, [r7, #15]
 8001f92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	7bfb      	ldrb	r3, [r7, #15]
 8001f98:	b298      	uxth	r0, r3
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	3342      	adds	r3, #66	; 0x42
 8001fa8:	4602      	mov	r2, r0
 8001faa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	333f      	adds	r3, #63	; 0x3f
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	3344      	adds	r3, #68	; 0x44
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	6879      	ldr	r1, [r7, #4]
 8001fd8:	4613      	mov	r3, r2
 8001fda:	00db      	lsls	r3, r3, #3
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3348      	adds	r3, #72	; 0x48
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	3350      	adds	r3, #80	; 0x50
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	3301      	adds	r3, #1
 8002000:	73fb      	strb	r3, [r7, #15]
 8002002:	7bfa      	ldrb	r2, [r7, #15]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	d3af      	bcc.n	8001f6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800200c:	2300      	movs	r3, #0
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	e044      	b.n	800209c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	6879      	ldr	r1, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	1a9b      	subs	r3, r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	440b      	add	r3, r1
 8002020:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	6879      	ldr	r1, [r7, #4]
 8002042:	4613      	mov	r3, r2
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	1a9b      	subs	r3, r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	6879      	ldr	r1, [r7, #4]
 8002058:	4613      	mov	r3, r2
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	1a9b      	subs	r3, r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	440b      	add	r3, r1
 8002062:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	1a9b      	subs	r3, r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002080:	7bfa      	ldrb	r2, [r7, #15]
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	4613      	mov	r3, r2
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	1a9b      	subs	r3, r3, r2
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	440b      	add	r3, r1
 800208e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	3301      	adds	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
 800209c:	7bfa      	ldrb	r2, [r7, #15]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d3b5      	bcc.n	8002012 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	603b      	str	r3, [r7, #0]
 80020ac:	687e      	ldr	r6, [r7, #4]
 80020ae:	466d      	mov	r5, sp
 80020b0:	f106 0410 	add.w	r4, r6, #16
 80020b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80020c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80020c4:	1d33      	adds	r3, r6, #4
 80020c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020c8:	6838      	ldr	r0, [r7, #0]
 80020ca:	f003 fc59 	bl	8005980 <USB_DevInit>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e014      	b.n	800210a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d102      	bne.n	80020fe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f80b 	bl	8002114 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f003 fdfb 	bl	8005cfe <USB_DevDisconnect>

  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3714      	adds	r7, #20
 800210e:	46bd      	mov	sp, r7
 8002110:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002114 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002142:	4b05      	ldr	r3, [pc, #20]	; (8002158 <HAL_PCDEx_ActivateLPM+0x44>)
 8002144:	4313      	orrs	r3, r2
 8002146:	68fa      	ldr	r2, [r7, #12]
 8002148:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	10000003 	.word	0x10000003

0800215c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_PWREx_ConfigSupply+0x70>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0304 	and.w	r3, r3, #4
 800216c:	2b04      	cmp	r3, #4
 800216e:	d00a      	beq.n	8002186 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HAL_PWREx_ConfigSupply+0x70>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	f003 0307 	and.w	r3, r3, #7
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	429a      	cmp	r2, r3
 800217c:	d001      	beq.n	8002182 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e01f      	b.n	80021c2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002182:	2300      	movs	r3, #0
 8002184:	e01d      	b.n	80021c2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002186:	4b11      	ldr	r3, [pc, #68]	; (80021cc <HAL_PWREx_ConfigSupply+0x70>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	f023 0207 	bic.w	r2, r3, #7
 800218e:	490f      	ldr	r1, [pc, #60]	; (80021cc <HAL_PWREx_ConfigSupply+0x70>)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4313      	orrs	r3, r2
 8002194:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002196:	f7fe ff85 	bl	80010a4 <HAL_GetTick>
 800219a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800219c:	e009      	b.n	80021b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800219e:	f7fe ff81 	bl	80010a4 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021ac:	d901      	bls.n	80021b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e007      	b.n	80021c2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_PWREx_ConfigSupply+0x70>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021be:	d1ee      	bne.n	800219e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3710      	adds	r7, #16
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	58024800 	.word	0x58024800

080021d0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80021d4:	4b05      	ldr	r3, [pc, #20]	; (80021ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a04      	ldr	r2, [pc, #16]	; (80021ec <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80021da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021de:	60d3      	str	r3, [r2, #12]
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	58024800 	.word	0x58024800

080021f0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08c      	sub	sp, #48	; 0x30
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d101      	bne.n	8002202 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e3ff      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	f000 8087 	beq.w	800231e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002210:	4b99      	ldr	r3, [pc, #612]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002212:	691b      	ldr	r3, [r3, #16]
 8002214:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002218:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800221a:	4b97      	ldr	r3, [pc, #604]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 800221c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002222:	2b10      	cmp	r3, #16
 8002224:	d007      	beq.n	8002236 <HAL_RCC_OscConfig+0x46>
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	2b18      	cmp	r3, #24
 800222a:	d110      	bne.n	800224e <HAL_RCC_OscConfig+0x5e>
 800222c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800222e:	f003 0303 	and.w	r3, r3, #3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d10b      	bne.n	800224e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002236:	4b90      	ldr	r3, [pc, #576]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d06c      	beq.n	800231c <HAL_RCC_OscConfig+0x12c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d168      	bne.n	800231c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e3d9      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002256:	d106      	bne.n	8002266 <HAL_RCC_OscConfig+0x76>
 8002258:	4b87      	ldr	r3, [pc, #540]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a86      	ldr	r2, [pc, #536]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 800225e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	e02e      	b.n	80022c4 <HAL_RCC_OscConfig+0xd4>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10c      	bne.n	8002288 <HAL_RCC_OscConfig+0x98>
 800226e:	4b82      	ldr	r3, [pc, #520]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a81      	ldr	r2, [pc, #516]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b7f      	ldr	r3, [pc, #508]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a7e      	ldr	r2, [pc, #504]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002284:	6013      	str	r3, [r2, #0]
 8002286:	e01d      	b.n	80022c4 <HAL_RCC_OscConfig+0xd4>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002290:	d10c      	bne.n	80022ac <HAL_RCC_OscConfig+0xbc>
 8002292:	4b79      	ldr	r3, [pc, #484]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a78      	ldr	r2, [pc, #480]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800229c:	6013      	str	r3, [r2, #0]
 800229e:	4b76      	ldr	r3, [pc, #472]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a75      	ldr	r2, [pc, #468]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	e00b      	b.n	80022c4 <HAL_RCC_OscConfig+0xd4>
 80022ac:	4b72      	ldr	r3, [pc, #456]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a71      	ldr	r2, [pc, #452]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 80022b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b6:	6013      	str	r3, [r2, #0]
 80022b8:	4b6f      	ldr	r3, [pc, #444]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a6e      	ldr	r2, [pc, #440]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 80022be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d013      	beq.n	80022f4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022cc:	f7fe feea 	bl	80010a4 <HAL_GetTick>
 80022d0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022d2:	e008      	b.n	80022e6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022d4:	f7fe fee6 	bl	80010a4 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b64      	cmp	r3, #100	; 0x64
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e38d      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022e6:	4b64      	ldr	r3, [pc, #400]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f0      	beq.n	80022d4 <HAL_RCC_OscConfig+0xe4>
 80022f2:	e014      	b.n	800231e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022f4:	f7fe fed6 	bl	80010a4 <HAL_GetTick>
 80022f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022fa:	e008      	b.n	800230e <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022fc:	f7fe fed2 	bl	80010a4 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b64      	cmp	r3, #100	; 0x64
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e379      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800230e:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1f0      	bne.n	80022fc <HAL_RCC_OscConfig+0x10c>
 800231a:	e000      	b.n	800231e <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800231c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80ae 	beq.w	8002488 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800232c:	4b52      	ldr	r3, [pc, #328]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002334:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002336:	4b50      	ldr	r3, [pc, #320]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_RCC_OscConfig+0x162>
 8002342:	6a3b      	ldr	r3, [r7, #32]
 8002344:	2b18      	cmp	r3, #24
 8002346:	d13a      	bne.n	80023be <HAL_RCC_OscConfig+0x1ce>
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b00      	cmp	r3, #0
 8002350:	d135      	bne.n	80023be <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002352:	4b49      	ldr	r3, [pc, #292]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_RCC_OscConfig+0x17a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e34b      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236a:	f7fe fecb 	bl	8001104 <HAL_GetREVID>
 800236e:	4603      	mov	r3, r0
 8002370:	f241 0203 	movw	r2, #4099	; 0x1003
 8002374:	4293      	cmp	r3, r2
 8002376:	d817      	bhi.n	80023a8 <HAL_RCC_OscConfig+0x1b8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	2b40      	cmp	r3, #64	; 0x40
 800237e:	d108      	bne.n	8002392 <HAL_RCC_OscConfig+0x1a2>
 8002380:	4b3d      	ldr	r3, [pc, #244]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002388:	4a3b      	ldr	r2, [pc, #236]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 800238a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800238e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002390:	e07a      	b.n	8002488 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002392:	4b39      	ldr	r3, [pc, #228]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	031b      	lsls	r3, r3, #12
 80023a0:	4935      	ldr	r1, [pc, #212]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023a6:	e06f      	b.n	8002488 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a8:	4b33      	ldr	r3, [pc, #204]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	4930      	ldr	r1, [pc, #192]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023bc:	e064      	b.n	8002488 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d045      	beq.n	8002452 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80023c6:	4b2c      	ldr	r3, [pc, #176]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 0219 	bic.w	r2, r3, #25
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	4929      	ldr	r1, [pc, #164]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7fe fe64 	bl	80010a4 <HAL_GetTick>
 80023dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e0:	f7fe fe60 	bl	80010a4 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e307      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023f2:	4b21      	ldr	r3, [pc, #132]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0304 	and.w	r3, r3, #4
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fe:	f7fe fe81 	bl	8001104 <HAL_GetREVID>
 8002402:	4603      	mov	r3, r0
 8002404:	f241 0203 	movw	r2, #4099	; 0x1003
 8002408:	4293      	cmp	r3, r2
 800240a:	d817      	bhi.n	800243c <HAL_RCC_OscConfig+0x24c>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	2b40      	cmp	r3, #64	; 0x40
 8002412:	d108      	bne.n	8002426 <HAL_RCC_OscConfig+0x236>
 8002414:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800241c:	4a16      	ldr	r2, [pc, #88]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 800241e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002422:	6053      	str	r3, [r2, #4]
 8002424:	e030      	b.n	8002488 <HAL_RCC_OscConfig+0x298>
 8002426:	4b14      	ldr	r3, [pc, #80]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	031b      	lsls	r3, r3, #12
 8002434:	4910      	ldr	r1, [pc, #64]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002436:	4313      	orrs	r3, r2
 8002438:	604b      	str	r3, [r1, #4]
 800243a:	e025      	b.n	8002488 <HAL_RCC_OscConfig+0x298>
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	061b      	lsls	r3, r3, #24
 800244a:	490b      	ldr	r1, [pc, #44]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 800244c:	4313      	orrs	r3, r2
 800244e:	604b      	str	r3, [r1, #4]
 8002450:	e01a      	b.n	8002488 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a08      	ldr	r2, [pc, #32]	; (8002478 <HAL_RCC_OscConfig+0x288>)
 8002458:	f023 0301 	bic.w	r3, r3, #1
 800245c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245e:	f7fe fe21 	bl	80010a4 <HAL_GetTick>
 8002462:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002464:	e00a      	b.n	800247c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002466:	f7fe fe1d 	bl	80010a4 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d903      	bls.n	800247c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e2c4      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
 8002478:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800247c:	4ba4      	ldr	r3, [pc, #656]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1ee      	bne.n	8002466 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0310 	and.w	r3, r3, #16
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a9 	beq.w	80025e8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002496:	4b9e      	ldr	r3, [pc, #632]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800249e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024a0:	4b9b      	ldr	r3, [pc, #620]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	2b08      	cmp	r3, #8
 80024aa:	d007      	beq.n	80024bc <HAL_RCC_OscConfig+0x2cc>
 80024ac:	69bb      	ldr	r3, [r7, #24]
 80024ae:	2b18      	cmp	r3, #24
 80024b0:	d13a      	bne.n	8002528 <HAL_RCC_OscConfig+0x338>
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f003 0303 	and.w	r3, r3, #3
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d135      	bne.n	8002528 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024bc:	4b94      	ldr	r3, [pc, #592]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_OscConfig+0x2e4>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	2b80      	cmp	r3, #128	; 0x80
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e296      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024d4:	f7fe fe16 	bl	8001104 <HAL_GetREVID>
 80024d8:	4603      	mov	r3, r0
 80024da:	f241 0203 	movw	r2, #4099	; 0x1003
 80024de:	4293      	cmp	r3, r2
 80024e0:	d817      	bhi.n	8002512 <HAL_RCC_OscConfig+0x322>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a1b      	ldr	r3, [r3, #32]
 80024e6:	2b20      	cmp	r3, #32
 80024e8:	d108      	bne.n	80024fc <HAL_RCC_OscConfig+0x30c>
 80024ea:	4b89      	ldr	r3, [pc, #548]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80024f2:	4a87      	ldr	r2, [pc, #540]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 80024f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024f8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80024fa:	e075      	b.n	80025e8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024fc:	4b84      	ldr	r3, [pc, #528]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6a1b      	ldr	r3, [r3, #32]
 8002508:	069b      	lsls	r3, r3, #26
 800250a:	4981      	ldr	r1, [pc, #516]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 800250c:	4313      	orrs	r3, r2
 800250e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002510:	e06a      	b.n	80025e8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002512:	4b7f      	ldr	r3, [pc, #508]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 8002514:	68db      	ldr	r3, [r3, #12]
 8002516:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	061b      	lsls	r3, r3, #24
 8002520:	497b      	ldr	r1, [pc, #492]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 8002522:	4313      	orrs	r3, r2
 8002524:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002526:	e05f      	b.n	80025e8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d042      	beq.n	80025b6 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002530:	4b77      	ldr	r3, [pc, #476]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a76      	ldr	r2, [pc, #472]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 8002536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800253a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fdb2 	bl	80010a4 <HAL_GetTick>
 8002540:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002544:	f7fe fdae 	bl	80010a4 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b02      	cmp	r3, #2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e255      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002556:	4b6e      	ldr	r3, [pc, #440]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002562:	f7fe fdcf 	bl	8001104 <HAL_GetREVID>
 8002566:	4603      	mov	r3, r0
 8002568:	f241 0203 	movw	r2, #4099	; 0x1003
 800256c:	4293      	cmp	r3, r2
 800256e:	d817      	bhi.n	80025a0 <HAL_RCC_OscConfig+0x3b0>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6a1b      	ldr	r3, [r3, #32]
 8002574:	2b20      	cmp	r3, #32
 8002576:	d108      	bne.n	800258a <HAL_RCC_OscConfig+0x39a>
 8002578:	4b65      	ldr	r3, [pc, #404]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002580:	4a63      	ldr	r2, [pc, #396]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 8002582:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002586:	6053      	str	r3, [r2, #4]
 8002588:	e02e      	b.n	80025e8 <HAL_RCC_OscConfig+0x3f8>
 800258a:	4b61      	ldr	r3, [pc, #388]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	069b      	lsls	r3, r3, #26
 8002598:	495d      	ldr	r1, [pc, #372]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 800259a:	4313      	orrs	r3, r2
 800259c:	604b      	str	r3, [r1, #4]
 800259e:	e023      	b.n	80025e8 <HAL_RCC_OscConfig+0x3f8>
 80025a0:	4b5b      	ldr	r3, [pc, #364]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	061b      	lsls	r3, r3, #24
 80025ae:	4958      	ldr	r1, [pc, #352]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60cb      	str	r3, [r1, #12]
 80025b4:	e018      	b.n	80025e8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80025b6:	4b56      	ldr	r3, [pc, #344]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a55      	ldr	r2, [pc, #340]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 80025bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80025c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c2:	f7fe fd6f 	bl	80010a4 <HAL_GetTick>
 80025c6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025c8:	e008      	b.n	80025dc <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80025ca:	f7fe fd6b 	bl	80010a4 <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d901      	bls.n	80025dc <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	e212      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80025dc:	4b4c      	ldr	r3, [pc, #304]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d1f0      	bne.n	80025ca <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d036      	beq.n	8002662 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d019      	beq.n	8002630 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025fc:	4b44      	ldr	r3, [pc, #272]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 80025fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002600:	4a43      	ldr	r2, [pc, #268]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002608:	f7fe fd4c 	bl	80010a4 <HAL_GetTick>
 800260c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002610:	f7fe fd48 	bl	80010a4 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e1ef      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002622:	4b3b      	ldr	r3, [pc, #236]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 8002624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	2b00      	cmp	r3, #0
 800262c:	d0f0      	beq.n	8002610 <HAL_RCC_OscConfig+0x420>
 800262e:	e018      	b.n	8002662 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002630:	4b37      	ldr	r3, [pc, #220]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 8002632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002634:	4a36      	ldr	r2, [pc, #216]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe fd32 	bl	80010a4 <HAL_GetTick>
 8002640:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002644:	f7fe fd2e 	bl	80010a4 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e1d5      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002656:	4b2e      	ldr	r3, [pc, #184]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 8002658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b00      	cmp	r3, #0
 800266c:	d036      	beq.n	80026dc <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d019      	beq.n	80026aa <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002676:	4b26      	ldr	r3, [pc, #152]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a25      	ldr	r2, [pc, #148]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 800267c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002680:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002682:	f7fe fd0f 	bl	80010a4 <HAL_GetTick>
 8002686:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800268a:	f7fe fd0b 	bl	80010a4 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e1b2      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800269c:	4b1c      	ldr	r3, [pc, #112]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0f0      	beq.n	800268a <HAL_RCC_OscConfig+0x49a>
 80026a8:	e018      	b.n	80026dc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026aa:	4b19      	ldr	r3, [pc, #100]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a18      	ldr	r2, [pc, #96]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 80026b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026b4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026b6:	f7fe fcf5 	bl	80010a4 <HAL_GetTick>
 80026ba:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026bc:	e008      	b.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80026be:	f7fe fcf1 	bl	80010a4 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d901      	bls.n	80026d0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 80026cc:	2303      	movs	r3, #3
 80026ce:	e198      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026d0:	4b0f      	ldr	r3, [pc, #60]	; (8002710 <HAL_RCC_OscConfig+0x520>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1f0      	bne.n	80026be <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 0304 	and.w	r3, r3, #4
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8085 	beq.w	80027f4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80026ea:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_RCC_OscConfig+0x524>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a09      	ldr	r2, [pc, #36]	; (8002714 <HAL_RCC_OscConfig+0x524>)
 80026f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026f6:	f7fe fcd5 	bl	80010a4 <HAL_GetTick>
 80026fa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026fc:	e00c      	b.n	8002718 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80026fe:	f7fe fcd1 	bl	80010a4 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b64      	cmp	r3, #100	; 0x64
 800270a:	d905      	bls.n	8002718 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e178      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
 8002710:	58024400 	.word	0x58024400
 8002714:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002718:	4b96      	ldr	r3, [pc, #600]	; (8002974 <HAL_RCC_OscConfig+0x784>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0ec      	beq.n	80026fe <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d106      	bne.n	800273a <HAL_RCC_OscConfig+0x54a>
 800272c:	4b92      	ldr	r3, [pc, #584]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4a91      	ldr	r2, [pc, #580]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002732:	f043 0301 	orr.w	r3, r3, #1
 8002736:	6713      	str	r3, [r2, #112]	; 0x70
 8002738:	e02d      	b.n	8002796 <HAL_RCC_OscConfig+0x5a6>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0x56c>
 8002742:	4b8d      	ldr	r3, [pc, #564]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002746:	4a8c      	ldr	r2, [pc, #560]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	6713      	str	r3, [r2, #112]	; 0x70
 800274e:	4b8a      	ldr	r3, [pc, #552]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002752:	4a89      	ldr	r2, [pc, #548]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002754:	f023 0304 	bic.w	r3, r3, #4
 8002758:	6713      	str	r3, [r2, #112]	; 0x70
 800275a:	e01c      	b.n	8002796 <HAL_RCC_OscConfig+0x5a6>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	2b05      	cmp	r3, #5
 8002762:	d10c      	bne.n	800277e <HAL_RCC_OscConfig+0x58e>
 8002764:	4b84      	ldr	r3, [pc, #528]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002768:	4a83      	ldr	r2, [pc, #524]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 800276a:	f043 0304 	orr.w	r3, r3, #4
 800276e:	6713      	str	r3, [r2, #112]	; 0x70
 8002770:	4b81      	ldr	r3, [pc, #516]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002774:	4a80      	ldr	r2, [pc, #512]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002776:	f043 0301 	orr.w	r3, r3, #1
 800277a:	6713      	str	r3, [r2, #112]	; 0x70
 800277c:	e00b      	b.n	8002796 <HAL_RCC_OscConfig+0x5a6>
 800277e:	4b7e      	ldr	r3, [pc, #504]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002782:	4a7d      	ldr	r2, [pc, #500]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002784:	f023 0301 	bic.w	r3, r3, #1
 8002788:	6713      	str	r3, [r2, #112]	; 0x70
 800278a:	4b7b      	ldr	r3, [pc, #492]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 800278c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800278e:	4a7a      	ldr	r2, [pc, #488]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002790:	f023 0304 	bic.w	r3, r3, #4
 8002794:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d015      	beq.n	80027ca <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279e:	f7fe fc81 	bl	80010a4 <HAL_GetTick>
 80027a2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027a4:	e00a      	b.n	80027bc <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe fc7d 	bl	80010a4 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e122      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027bc:	4b6e      	ldr	r3, [pc, #440]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d0ee      	beq.n	80027a6 <HAL_RCC_OscConfig+0x5b6>
 80027c8:	e014      	b.n	80027f4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ca:	f7fe fc6b 	bl	80010a4 <HAL_GetTick>
 80027ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027d0:	e00a      	b.n	80027e8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d2:	f7fe fc67 	bl	80010a4 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e10c      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027e8:	4b63      	ldr	r3, [pc, #396]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1ee      	bne.n	80027d2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8101 	beq.w	8002a00 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80027fe:	4b5e      	ldr	r3, [pc, #376]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002806:	2b18      	cmp	r3, #24
 8002808:	f000 80bc 	beq.w	8002984 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	2b02      	cmp	r3, #2
 8002812:	f040 8095 	bne.w	8002940 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002816:	4b58      	ldr	r3, [pc, #352]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a57      	ldr	r2, [pc, #348]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 800281c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002822:	f7fe fc3f 	bl	80010a4 <HAL_GetTick>
 8002826:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800282a:	f7fe fc3b 	bl	80010a4 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b02      	cmp	r3, #2
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e0e2      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800283c:	4b4e      	ldr	r3, [pc, #312]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f0      	bne.n	800282a <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002848:	4b4b      	ldr	r3, [pc, #300]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 800284a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800284c:	4b4b      	ldr	r3, [pc, #300]	; (800297c <HAL_RCC_OscConfig+0x78c>)
 800284e:	4013      	ands	r3, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002858:	0112      	lsls	r2, r2, #4
 800285a:	430a      	orrs	r2, r1
 800285c:	4946      	ldr	r1, [pc, #280]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 800285e:	4313      	orrs	r3, r2
 8002860:	628b      	str	r3, [r1, #40]	; 0x28
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	3b01      	subs	r3, #1
 8002868:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002870:	3b01      	subs	r3, #1
 8002872:	025b      	lsls	r3, r3, #9
 8002874:	b29b      	uxth	r3, r3
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800287c:	3b01      	subs	r3, #1
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002884:	431a      	orrs	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288a:	3b01      	subs	r3, #1
 800288c:	061b      	lsls	r3, r3, #24
 800288e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002892:	4939      	ldr	r1, [pc, #228]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002894:	4313      	orrs	r3, r2
 8002896:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002898:	4b37      	ldr	r3, [pc, #220]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	4a36      	ldr	r2, [pc, #216]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028a4:	4b34      	ldr	r3, [pc, #208]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 80028a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028a8:	4b35      	ldr	r3, [pc, #212]	; (8002980 <HAL_RCC_OscConfig+0x790>)
 80028aa:	4013      	ands	r3, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028b0:	00d2      	lsls	r2, r2, #3
 80028b2:	4931      	ldr	r1, [pc, #196]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80028b8:	4b2f      	ldr	r3, [pc, #188]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 80028ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028bc:	f023 020c 	bic.w	r2, r3, #12
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	492c      	ldr	r1, [pc, #176]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80028ca:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	f023 0202 	bic.w	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	4928      	ldr	r1, [pc, #160]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80028dc:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 80028de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e0:	4a25      	ldr	r2, [pc, #148]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 80028e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028e8:	4b23      	ldr	r3, [pc, #140]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 80028ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 80028ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80028f4:	4b20      	ldr	r3, [pc, #128]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	4a1f      	ldr	r2, [pc, #124]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 80028fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002900:	4b1d      	ldr	r3, [pc, #116]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002904:	4a1c      	ldr	r2, [pc, #112]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800290c:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a19      	ldr	r2, [pc, #100]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002916:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002918:	f7fe fbc4 	bl	80010a4 <HAL_GetTick>
 800291c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002920:	f7fe fbc0 	bl	80010a4 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e067      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002932:	4b11      	ldr	r3, [pc, #68]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x730>
 800293e:	e05f      	b.n	8002a00 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a0c      	ldr	r2, [pc, #48]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002946:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800294a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294c:	f7fe fbaa 	bl	80010a4 <HAL_GetTick>
 8002950:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002954:	f7fe fba6 	bl	80010a4 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e04d      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002966:	4b04      	ldr	r3, [pc, #16]	; (8002978 <HAL_RCC_OscConfig+0x788>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x764>
 8002972:	e045      	b.n	8002a00 <HAL_RCC_OscConfig+0x810>
 8002974:	58024800 	.word	0x58024800
 8002978:	58024400 	.word	0x58024400
 800297c:	fffffc0c 	.word	0xfffffc0c
 8002980:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002984:	4b21      	ldr	r3, [pc, #132]	; (8002a0c <HAL_RCC_OscConfig+0x81c>)
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_OscConfig+0x81c>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	2b01      	cmp	r3, #1
 8002996:	d031      	beq.n	80029fc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f003 0203 	and.w	r2, r3, #3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d12a      	bne.n	80029fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d122      	bne.n	80029fc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d11a      	bne.n	80029fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	0a5b      	lsrs	r3, r3, #9
 80029ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d111      	bne.n	80029fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	0c1b      	lsrs	r3, r3, #16
 80029dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d108      	bne.n	80029fc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	0e1b      	lsrs	r3, r3, #24
 80029ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d001      	beq.n	8002a00 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80029fc:	2301      	movs	r3, #1
 80029fe:	e000      	b.n	8002a02 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3730      	adds	r7, #48	; 0x30
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	58024400 	.word	0x58024400

08002a10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
 8002a18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e19c      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a24:	4b8a      	ldr	r3, [pc, #552]	; (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 030f 	and.w	r3, r3, #15
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d910      	bls.n	8002a54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a32:	4b87      	ldr	r3, [pc, #540]	; (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 020f 	bic.w	r2, r3, #15
 8002a3a:	4985      	ldr	r1, [pc, #532]	; (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a42:	4b83      	ldr	r3, [pc, #524]	; (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d001      	beq.n	8002a54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e184      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d010      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	691a      	ldr	r2, [r3, #16]
 8002a64:	4b7b      	ldr	r3, [pc, #492]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d908      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a70:	4b78      	ldr	r3, [pc, #480]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691b      	ldr	r3, [r3, #16]
 8002a7c:	4975      	ldr	r1, [pc, #468]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0308 	and.w	r3, r3, #8
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d010      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	695a      	ldr	r2, [r3, #20]
 8002a92:	4b70      	ldr	r3, [pc, #448]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002a94:	69db      	ldr	r3, [r3, #28]
 8002a96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d908      	bls.n	8002ab0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a9e:	4b6d      	ldr	r3, [pc, #436]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	496a      	ldr	r1, [pc, #424]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d010      	beq.n	8002ade <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	4b64      	ldr	r3, [pc, #400]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002ac2:	69db      	ldr	r3, [r3, #28]
 8002ac4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d908      	bls.n	8002ade <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002acc:	4b61      	ldr	r3, [pc, #388]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002ace:	69db      	ldr	r3, [r3, #28]
 8002ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	495e      	ldr	r1, [pc, #376]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d010      	beq.n	8002b0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	69da      	ldr	r2, [r3, #28]
 8002aee:	4b59      	ldr	r3, [pc, #356]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d908      	bls.n	8002b0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002afa:	4b56      	ldr	r3, [pc, #344]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	4953      	ldr	r1, [pc, #332]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d010      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68da      	ldr	r2, [r3, #12]
 8002b1c:	4b4d      	ldr	r3, [pc, #308]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	f003 030f 	and.w	r3, r3, #15
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d908      	bls.n	8002b3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b28:	4b4a      	ldr	r3, [pc, #296]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f023 020f 	bic.w	r2, r3, #15
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4947      	ldr	r1, [pc, #284]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0301 	and.w	r3, r3, #1
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d055      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b46:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	4940      	ldr	r1, [pc, #256]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d107      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b60:	4b3c      	ldr	r3, [pc, #240]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d121      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0f6      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	2b03      	cmp	r3, #3
 8002b76:	d107      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b78:	4b36      	ldr	r3, [pc, #216]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d115      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0ea      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d107      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b90:	4b30      	ldr	r3, [pc, #192]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d109      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0de      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ba0:	4b2c      	ldr	r3, [pc, #176]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0d6      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bb0:	4b28      	ldr	r3, [pc, #160]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f023 0207 	bic.w	r2, r3, #7
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	685b      	ldr	r3, [r3, #4]
 8002bbc:	4925      	ldr	r1, [pc, #148]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc2:	f7fe fa6f 	bl	80010a4 <HAL_GetTick>
 8002bc6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc8:	e00a      	b.n	8002be0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bca:	f7fe fa6b 	bl	80010a4 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e0be      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be0:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002be2:	691b      	ldr	r3, [r3, #16]
 8002be4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	00db      	lsls	r3, r3, #3
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d1eb      	bne.n	8002bca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d010      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	f003 030f 	and.w	r3, r3, #15
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d208      	bcs.n	8002c20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	f023 020f 	bic.w	r2, r3, #15
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	490e      	ldr	r1, [pc, #56]	; (8002c54 <HAL_RCC_ClockConfig+0x244>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c20:	4b0b      	ldr	r3, [pc, #44]	; (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 030f 	and.w	r3, r3, #15
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d214      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 020f 	bic.w	r2, r3, #15
 8002c36:	4906      	ldr	r1, [pc, #24]	; (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <HAL_RCC_ClockConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 030f 	and.w	r3, r3, #15
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e086      	b.n	8002d5e <HAL_RCC_ClockConfig+0x34e>
 8002c50:	52002000 	.word	0x52002000
 8002c54:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0304 	and.w	r3, r3, #4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d010      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	691a      	ldr	r2, [r3, #16]
 8002c68:	4b3f      	ldr	r3, [pc, #252]	; (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002c6a:	699b      	ldr	r3, [r3, #24]
 8002c6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d208      	bcs.n	8002c86 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c74:	4b3c      	ldr	r3, [pc, #240]	; (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002c76:	699b      	ldr	r3, [r3, #24]
 8002c78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	4939      	ldr	r1, [pc, #228]	; (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f003 0308 	and.w	r3, r3, #8
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d010      	beq.n	8002cb4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	4b34      	ldr	r3, [pc, #208]	; (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002c98:	69db      	ldr	r3, [r3, #28]
 8002c9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d208      	bcs.n	8002cb4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ca2:	4b31      	ldr	r3, [pc, #196]	; (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	695b      	ldr	r3, [r3, #20]
 8002cae:	492e      	ldr	r1, [pc, #184]	; (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0310 	and.w	r3, r3, #16
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d010      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	699a      	ldr	r2, [r3, #24]
 8002cc4:	4b28      	ldr	r3, [pc, #160]	; (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d208      	bcs.n	8002ce2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cd0:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	4922      	ldr	r1, [pc, #136]	; (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d010      	beq.n	8002d10 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69da      	ldr	r2, [r3, #28]
 8002cf2:	4b1d      	ldr	r3, [pc, #116]	; (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d208      	bcs.n	8002d10 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	4917      	ldr	r1, [pc, #92]	; (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002d10:	f000 f834 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	0a1b      	lsrs	r3, r3, #8
 8002d1c:	f003 030f 	and.w	r3, r3, #15
 8002d20:	4912      	ldr	r1, [pc, #72]	; (8002d6c <HAL_RCC_ClockConfig+0x35c>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
 8002d2c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d2e:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <HAL_RCC_ClockConfig+0x358>)
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	4a0d      	ldr	r2, [pc, #52]	; (8002d6c <HAL_RCC_ClockConfig+0x35c>)
 8002d38:	5cd3      	ldrb	r3, [r2, r3]
 8002d3a:	f003 031f 	and.w	r3, r3, #31
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	fa22 f303 	lsr.w	r3, r2, r3
 8002d44:	4a0a      	ldr	r2, [pc, #40]	; (8002d70 <HAL_RCC_ClockConfig+0x360>)
 8002d46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d48:	4a0a      	ldr	r2, [pc, #40]	; (8002d74 <HAL_RCC_ClockConfig+0x364>)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8002d4e:	4b0a      	ldr	r3, [pc, #40]	; (8002d78 <HAL_RCC_ClockConfig+0x368>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7fe f95c 	bl	8001010 <HAL_InitTick>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	58024400 	.word	0x58024400
 8002d6c:	08005e18 	.word	0x08005e18
 8002d70:	24000004 	.word	0x24000004
 8002d74:	24000000 	.word	0x24000000
 8002d78:	24000008 	.word	0x24000008

08002d7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d82:	4bb3      	ldr	r3, [pc, #716]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d8a:	2b18      	cmp	r3, #24
 8002d8c:	f200 8155 	bhi.w	800303a <HAL_RCC_GetSysClockFreq+0x2be>
 8002d90:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002dfd 	.word	0x08002dfd
 8002d9c:	0800303b 	.word	0x0800303b
 8002da0:	0800303b 	.word	0x0800303b
 8002da4:	0800303b 	.word	0x0800303b
 8002da8:	0800303b 	.word	0x0800303b
 8002dac:	0800303b 	.word	0x0800303b
 8002db0:	0800303b 	.word	0x0800303b
 8002db4:	0800303b 	.word	0x0800303b
 8002db8:	08002e23 	.word	0x08002e23
 8002dbc:	0800303b 	.word	0x0800303b
 8002dc0:	0800303b 	.word	0x0800303b
 8002dc4:	0800303b 	.word	0x0800303b
 8002dc8:	0800303b 	.word	0x0800303b
 8002dcc:	0800303b 	.word	0x0800303b
 8002dd0:	0800303b 	.word	0x0800303b
 8002dd4:	0800303b 	.word	0x0800303b
 8002dd8:	08002e29 	.word	0x08002e29
 8002ddc:	0800303b 	.word	0x0800303b
 8002de0:	0800303b 	.word	0x0800303b
 8002de4:	0800303b 	.word	0x0800303b
 8002de8:	0800303b 	.word	0x0800303b
 8002dec:	0800303b 	.word	0x0800303b
 8002df0:	0800303b 	.word	0x0800303b
 8002df4:	0800303b 	.word	0x0800303b
 8002df8:	08002e2f 	.word	0x08002e2f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dfc:	4b94      	ldr	r3, [pc, #592]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d009      	beq.n	8002e1c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e08:	4b91      	ldr	r3, [pc, #580]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	4a90      	ldr	r2, [pc, #576]	; (8003054 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002e1a:	e111      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002e1c:	4b8d      	ldr	r3, [pc, #564]	; (8003054 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e1e:	61bb      	str	r3, [r7, #24]
    break;
 8002e20:	e10e      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8002e22:	4b8d      	ldr	r3, [pc, #564]	; (8003058 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e24:	61bb      	str	r3, [r7, #24]
    break;
 8002e26:	e10b      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002e28:	4b8c      	ldr	r3, [pc, #560]	; (800305c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002e2a:	61bb      	str	r3, [r7, #24]
    break;
 8002e2c:	e108      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e2e:	4b88      	ldr	r3, [pc, #544]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002e38:	4b85      	ldr	r3, [pc, #532]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e42:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e44:	4b82      	ldr	r3, [pc, #520]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e48:	f003 0301 	and.w	r3, r3, #1
 8002e4c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002e4e:	4b80      	ldr	r3, [pc, #512]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e52:	08db      	lsrs	r3, r3, #3
 8002e54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	fb02 f303 	mul.w	r3, r2, r3
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e66:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80e1 	beq.w	8003034 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	f000 8083 	beq.w	8002f80 <HAL_RCC_GetSysClockFreq+0x204>
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	f200 80a1 	bhi.w	8002fc4 <HAL_RCC_GetSysClockFreq+0x248>
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x114>
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d056      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e8e:	e099      	b.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e90:	4b6f      	ldr	r3, [pc, #444]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f003 0320 	and.w	r3, r3, #32
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d02d      	beq.n	8002ef8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002e9c:	4b6c      	ldr	r3, [pc, #432]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	08db      	lsrs	r3, r3, #3
 8002ea2:	f003 0303 	and.w	r3, r3, #3
 8002ea6:	4a6b      	ldr	r2, [pc, #428]	; (8003054 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ea8:	fa22 f303 	lsr.w	r3, r2, r3
 8002eac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	ee07 3a90 	vmov	s15, r3
 8002eb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ec6:	4b62      	ldr	r3, [pc, #392]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ece:	ee07 3a90 	vmov	s15, r3
 8002ed2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ed6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eda:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ede:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ee2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ee6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8002ef6:	e087      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	ee07 3a90 	vmov	s15, r3
 8002efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f02:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003064 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f0a:	4b51      	ldr	r3, [pc, #324]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f12:	ee07 3a90 	vmov	s15, r3
 8002f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f1a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f1e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f3a:	e065      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	ee07 3a90 	vmov	s15, r3
 8002f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f46:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003068 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f4e:	4b40      	ldr	r3, [pc, #256]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f56:	ee07 3a90 	vmov	s15, r3
 8002f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f5e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f62:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f7e:	e043      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800306c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f92:	4b2f      	ldr	r3, [pc, #188]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9a:	ee07 3a90 	vmov	s15, r3
 8002f9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fa6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002faa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fc2:	e021      	b.n	8003008 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	ee07 3a90 	vmov	s15, r3
 8002fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fce:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003068 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002fd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fde:	ee07 3a90 	vmov	s15, r3
 8002fe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003060 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003006:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003008:	4b11      	ldr	r3, [pc, #68]	; (8003050 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800300c:	0a5b      	lsrs	r3, r3, #9
 800300e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003012:	3301      	adds	r3, #1
 8003014:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	ee07 3a90 	vmov	s15, r3
 800301c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003020:	edd7 6a07 	vldr	s13, [r7, #28]
 8003024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800302c:	ee17 3a90 	vmov	r3, s15
 8003030:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003032:	e005      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003034:	2300      	movs	r3, #0
 8003036:	61bb      	str	r3, [r7, #24]
    break;
 8003038:	e002      	b.n	8003040 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800303a:	4b07      	ldr	r3, [pc, #28]	; (8003058 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800303c:	61bb      	str	r3, [r7, #24]
    break;
 800303e:	bf00      	nop
  }

  return sysclockfreq;
 8003040:	69bb      	ldr	r3, [r7, #24]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3724      	adds	r7, #36	; 0x24
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	58024400 	.word	0x58024400
 8003054:	03d09000 	.word	0x03d09000
 8003058:	003d0900 	.word	0x003d0900
 800305c:	007a1200 	.word	0x007a1200
 8003060:	46000000 	.word	0x46000000
 8003064:	4c742400 	.word	0x4c742400
 8003068:	4a742400 	.word	0x4a742400
 800306c:	4af42400 	.word	0x4af42400

08003070 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b082      	sub	sp, #8
 8003074:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003076:	f7ff fe81 	bl	8002d7c <HAL_RCC_GetSysClockFreq>
 800307a:	4602      	mov	r2, r0
 800307c:	4b10      	ldr	r3, [pc, #64]	; (80030c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	f003 030f 	and.w	r3, r3, #15
 8003086:	490f      	ldr	r1, [pc, #60]	; (80030c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003088:	5ccb      	ldrb	r3, [r1, r3]
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	fa22 f303 	lsr.w	r3, r2, r3
 8003092:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003094:	4b0a      	ldr	r3, [pc, #40]	; (80030c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003096:	699b      	ldr	r3, [r3, #24]
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	4a09      	ldr	r2, [pc, #36]	; (80030c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800309e:	5cd3      	ldrb	r3, [r2, r3]
 80030a0:	f003 031f 	and.w	r3, r3, #31
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	fa22 f303 	lsr.w	r3, r2, r3
 80030aa:	4a07      	ldr	r2, [pc, #28]	; (80030c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80030ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030ae:	4a07      	ldr	r2, [pc, #28]	; (80030cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80030b4:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80030b6:	681b      	ldr	r3, [r3, #0]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3708      	adds	r7, #8
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	58024400 	.word	0x58024400
 80030c4:	08005e18 	.word	0x08005e18
 80030c8:	24000004 	.word	0x24000004
 80030cc:	24000000 	.word	0x24000000

080030d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80030d4:	f7ff ffcc 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 80030d8:	4602      	mov	r2, r0
 80030da:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	091b      	lsrs	r3, r3, #4
 80030e0:	f003 0307 	and.w	r3, r3, #7
 80030e4:	4904      	ldr	r1, [pc, #16]	; (80030f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030e6:	5ccb      	ldrb	r3, [r1, r3]
 80030e8:	f003 031f 	and.w	r3, r3, #31
 80030ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	58024400 	.word	0x58024400
 80030f8:	08005e18 	.word	0x08005e18

080030fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003100:	f7ff ffb6 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8003104:	4602      	mov	r2, r0
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	4904      	ldr	r1, [pc, #16]	; (8003124 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003112:	5ccb      	ldrb	r3, [r1, r3]
 8003114:	f003 031f 	and.w	r3, r3, #31
 8003118:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800311c:	4618      	mov	r0, r3
 800311e:	bd80      	pop	{r7, pc}
 8003120:	58024400 	.word	0x58024400
 8003124:	08005e18 	.word	0x08005e18

08003128 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003130:	2300      	movs	r3, #0
 8003132:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003134:	2300      	movs	r3, #0
 8003136:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d03f      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003148:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800314c:	d02a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800314e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003152:	d824      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003154:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003158:	d018      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800315a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800315e:	d81e      	bhi.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003164:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003168:	d007      	beq.n	800317a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800316a:	e018      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800316c:	4bab      	ldr	r3, [pc, #684]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	4aaa      	ldr	r2, [pc, #680]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003172:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003176:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003178:	e015      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	3304      	adds	r3, #4
 800317e:	2102      	movs	r1, #2
 8003180:	4618      	mov	r0, r3
 8003182:	f001 f9cf 	bl	8004524 <RCCEx_PLL2_Config>
 8003186:	4603      	mov	r3, r0
 8003188:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800318a:	e00c      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	3324      	adds	r3, #36	; 0x24
 8003190:	2102      	movs	r1, #2
 8003192:	4618      	mov	r0, r3
 8003194:	f001 fa78 	bl	8004688 <RCCEx_PLL3_Config>
 8003198:	4603      	mov	r3, r0
 800319a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800319c:	e003      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
      break;
 80031a2:	e000      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d109      	bne.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80031ac:	4b9b      	ldr	r3, [pc, #620]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031b8:	4998      	ldr	r1, [pc, #608]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	650b      	str	r3, [r1, #80]	; 0x50
 80031be:	e001      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
 80031c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d03d      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d826      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80031d8:	a201      	add	r2, pc, #4	; (adr r2, 80031e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80031da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031de:	bf00      	nop
 80031e0:	080031f5 	.word	0x080031f5
 80031e4:	08003203 	.word	0x08003203
 80031e8:	08003215 	.word	0x08003215
 80031ec:	0800322d 	.word	0x0800322d
 80031f0:	0800322d 	.word	0x0800322d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031f4:	4b89      	ldr	r3, [pc, #548]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f8:	4a88      	ldr	r2, [pc, #544]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80031fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003200:	e015      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3304      	adds	r3, #4
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f001 f98b 	bl	8004524 <RCCEx_PLL2_Config>
 800320e:	4603      	mov	r3, r0
 8003210:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003212:	e00c      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	3324      	adds	r3, #36	; 0x24
 8003218:	2100      	movs	r1, #0
 800321a:	4618      	mov	r0, r3
 800321c:	f001 fa34 	bl	8004688 <RCCEx_PLL3_Config>
 8003220:	4603      	mov	r3, r0
 8003222:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003224:	e003      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	75fb      	strb	r3, [r7, #23]
      break;
 800322a:	e000      	b.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800322c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800322e:	7dfb      	ldrb	r3, [r7, #23]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d109      	bne.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003234:	4b79      	ldr	r3, [pc, #484]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003238:	f023 0207 	bic.w	r2, r3, #7
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003240:	4976      	ldr	r1, [pc, #472]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	650b      	str	r3, [r1, #80]	; 0x50
 8003246:	e001      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003248:	7dfb      	ldrb	r3, [r7, #23]
 800324a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003254:	2b00      	cmp	r3, #0
 8003256:	d042      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003260:	d02b      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0x192>
 8003262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003266:	d825      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003268:	2bc0      	cmp	r3, #192	; 0xc0
 800326a:	d028      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800326c:	2bc0      	cmp	r3, #192	; 0xc0
 800326e:	d821      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d016      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003274:	2b80      	cmp	r3, #128	; 0x80
 8003276:	d81d      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d002      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800327c:	2b40      	cmp	r3, #64	; 0x40
 800327e:	d007      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003280:	e018      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003282:	4b66      	ldr	r3, [pc, #408]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003286:	4a65      	ldr	r2, [pc, #404]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800328c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800328e:	e017      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	3304      	adds	r3, #4
 8003294:	2100      	movs	r1, #0
 8003296:	4618      	mov	r0, r3
 8003298:	f001 f944 	bl	8004524 <RCCEx_PLL2_Config>
 800329c:	4603      	mov	r3, r0
 800329e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80032a0:	e00e      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	3324      	adds	r3, #36	; 0x24
 80032a6:	2100      	movs	r1, #0
 80032a8:	4618      	mov	r0, r3
 80032aa:	f001 f9ed 	bl	8004688 <RCCEx_PLL3_Config>
 80032ae:	4603      	mov	r3, r0
 80032b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80032b2:	e005      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	75fb      	strb	r3, [r7, #23]
      break;
 80032b8:	e002      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80032ba:	bf00      	nop
 80032bc:	e000      	b.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80032be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032c0:	7dfb      	ldrb	r3, [r7, #23]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d109      	bne.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80032c6:	4b55      	ldr	r3, [pc, #340]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d2:	4952      	ldr	r1, [pc, #328]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	650b      	str	r3, [r1, #80]	; 0x50
 80032d8:	e001      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032da:	7dfb      	ldrb	r3, [r7, #23]
 80032dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d049      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80032f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032f4:	d030      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80032f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80032fa:	d82a      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80032fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003300:	d02c      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003302:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003306:	d824      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800330c:	d018      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800330e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003312:	d81e      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003314:	2b00      	cmp	r3, #0
 8003316:	d003      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003318:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800331c:	d007      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800331e:	e018      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003320:	4b3e      	ldr	r3, [pc, #248]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003324:	4a3d      	ldr	r2, [pc, #244]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003326:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800332c:	e017      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	3304      	adds	r3, #4
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f001 f8f5 	bl	8004524 <RCCEx_PLL2_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800333e:	e00e      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3324      	adds	r3, #36	; 0x24
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f001 f99e 	bl	8004688 <RCCEx_PLL3_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003350:	e005      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	75fb      	strb	r3, [r7, #23]
      break;
 8003356:	e002      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003358:	bf00      	nop
 800335a:	e000      	b.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800335c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800335e:	7dfb      	ldrb	r3, [r7, #23]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10a      	bne.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003364:	4b2d      	ldr	r3, [pc, #180]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003372:	492a      	ldr	r1, [pc, #168]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003374:	4313      	orrs	r3, r2
 8003376:	658b      	str	r3, [r1, #88]	; 0x58
 8003378:	e001      	b.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337a:	7dfb      	ldrb	r3, [r7, #23]
 800337c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003386:	2b00      	cmp	r3, #0
 8003388:	d04c      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003390:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003394:	d030      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003396:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800339a:	d82a      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800339c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033a0:	d02c      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 80033a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80033a6:	d824      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80033a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033ac:	d018      	beq.n	80033e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80033ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033b2:	d81e      	bhi.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80033b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033bc:	d007      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80033be:	e018      	b.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c0:	4b16      	ldr	r3, [pc, #88]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c4:	4a15      	ldr	r2, [pc, #84]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80033c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033cc:	e017      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	3304      	adds	r3, #4
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f001 f8a5 	bl	8004524 <RCCEx_PLL2_Config>
 80033da:	4603      	mov	r3, r0
 80033dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80033de:	e00e      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3324      	adds	r3, #36	; 0x24
 80033e4:	2100      	movs	r1, #0
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 f94e 	bl	8004688 <RCCEx_PLL3_Config>
 80033ec:	4603      	mov	r3, r0
 80033ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80033f0:	e005      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	75fb      	strb	r3, [r7, #23]
      break;
 80033f6:	e002      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80033f8:	bf00      	nop
 80033fa:	e000      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80033fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033fe:	7dfb      	ldrb	r3, [r7, #23]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d10d      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003406:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003408:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003412:	4902      	ldr	r1, [pc, #8]	; (800341c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003414:	4313      	orrs	r3, r2
 8003416:	658b      	str	r3, [r1, #88]	; 0x58
 8003418:	e004      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 800341a:	bf00      	nop
 800341c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003420:	7dfb      	ldrb	r3, [r7, #23]
 8003422:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d032      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003434:	2b30      	cmp	r3, #48	; 0x30
 8003436:	d01c      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003438:	2b30      	cmp	r3, #48	; 0x30
 800343a:	d817      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x344>
 800343c:	2b20      	cmp	r3, #32
 800343e:	d00c      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8003440:	2b20      	cmp	r3, #32
 8003442:	d813      	bhi.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8003444:	2b00      	cmp	r3, #0
 8003446:	d016      	beq.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8003448:	2b10      	cmp	r3, #16
 800344a:	d10f      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800344c:	4baf      	ldr	r3, [pc, #700]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	4aae      	ldr	r2, [pc, #696]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003452:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003456:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003458:	e00e      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3304      	adds	r3, #4
 800345e:	2102      	movs	r1, #2
 8003460:	4618      	mov	r0, r3
 8003462:	f001 f85f 	bl	8004524 <RCCEx_PLL2_Config>
 8003466:	4603      	mov	r3, r0
 8003468:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800346a:	e005      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	75fb      	strb	r3, [r7, #23]
      break;
 8003470:	e002      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8003476:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003478:	7dfb      	ldrb	r3, [r7, #23]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800347e:	4ba3      	ldr	r3, [pc, #652]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003482:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348a:	49a0      	ldr	r1, [pc, #640]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800348c:	4313      	orrs	r3, r2
 800348e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003490:	e001      	b.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003492:	7dfb      	ldrb	r3, [r7, #23]
 8003494:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d047      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034aa:	d030      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80034ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b0:	d82a      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80034b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034b6:	d02c      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80034b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80034bc:	d824      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80034be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c2:	d018      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80034c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c8:	d81e      	bhi.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80034ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d2:	d007      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80034d4:	e018      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d6:	4b8d      	ldr	r3, [pc, #564]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	4a8c      	ldr	r2, [pc, #560]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80034dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034e2:	e017      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3304      	adds	r3, #4
 80034e8:	2100      	movs	r1, #0
 80034ea:	4618      	mov	r0, r3
 80034ec:	f001 f81a 	bl	8004524 <RCCEx_PLL2_Config>
 80034f0:	4603      	mov	r3, r0
 80034f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80034f4:	e00e      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	3324      	adds	r3, #36	; 0x24
 80034fa:	2100      	movs	r1, #0
 80034fc:	4618      	mov	r0, r3
 80034fe:	f001 f8c3 	bl	8004688 <RCCEx_PLL3_Config>
 8003502:	4603      	mov	r3, r0
 8003504:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003506:	e005      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	75fb      	strb	r3, [r7, #23]
      break;
 800350c:	e002      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800350e:	bf00      	nop
 8003510:	e000      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8003512:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003514:	7dfb      	ldrb	r3, [r7, #23]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800351a:	4b7c      	ldr	r3, [pc, #496]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800351c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800351e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003526:	4979      	ldr	r1, [pc, #484]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8003528:	4313      	orrs	r3, r2
 800352a:	650b      	str	r3, [r1, #80]	; 0x50
 800352c:	e001      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352e:	7dfb      	ldrb	r3, [r7, #23]
 8003530:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d049      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003542:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003546:	d02e      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8003548:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800354c:	d828      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800354e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003552:	d02a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x482>
 8003554:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003558:	d822      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800355a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800355e:	d026      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x486>
 8003560:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003564:	d81c      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003566:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800356a:	d010      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x466>
 800356c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003570:	d816      	bhi.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01d      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8003576:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800357a:	d111      	bne.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3304      	adds	r3, #4
 8003580:	2101      	movs	r1, #1
 8003582:	4618      	mov	r0, r3
 8003584:	f000 ffce 	bl	8004524 <RCCEx_PLL2_Config>
 8003588:	4603      	mov	r3, r0
 800358a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800358c:	e012      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	3324      	adds	r3, #36	; 0x24
 8003592:	2101      	movs	r1, #1
 8003594:	4618      	mov	r0, r3
 8003596:	f001 f877 	bl	8004688 <RCCEx_PLL3_Config>
 800359a:	4603      	mov	r3, r0
 800359c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800359e:	e009      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	75fb      	strb	r3, [r7, #23]
      break;
 80035a4:	e006      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80035a6:	bf00      	nop
 80035a8:	e004      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80035aa:	bf00      	nop
 80035ac:	e002      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80035ae:	bf00      	nop
 80035b0:	e000      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80035b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035b4:	7dfb      	ldrb	r3, [r7, #23]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d109      	bne.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035ba:	4b54      	ldr	r3, [pc, #336]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035be:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035c6:	4951      	ldr	r1, [pc, #324]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	650b      	str	r3, [r1, #80]	; 0x50
 80035cc:	e001      	b.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
 80035d0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d04b      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80035e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035e8:	d02e      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80035ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035ee:	d828      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f4:	d02a      	beq.n	800364c <HAL_RCCEx_PeriphCLKConfig+0x524>
 80035f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fa:	d822      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80035fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003600:	d026      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8003602:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003606:	d81c      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003608:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800360c:	d010      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800360e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003612:	d816      	bhi.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d01d      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003618:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800361c:	d111      	bne.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	3304      	adds	r3, #4
 8003622:	2101      	movs	r1, #1
 8003624:	4618      	mov	r0, r3
 8003626:	f000 ff7d 	bl	8004524 <RCCEx_PLL2_Config>
 800362a:	4603      	mov	r3, r0
 800362c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800362e:	e012      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3324      	adds	r3, #36	; 0x24
 8003634:	2101      	movs	r1, #1
 8003636:	4618      	mov	r0, r3
 8003638:	f001 f826 	bl	8004688 <RCCEx_PLL3_Config>
 800363c:	4603      	mov	r3, r0
 800363e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003640:	e009      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	75fb      	strb	r3, [r7, #23]
      break;
 8003646:	e006      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003648:	bf00      	nop
 800364a:	e004      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800364c:	bf00      	nop
 800364e:	e002      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003650:	bf00      	nop
 8003652:	e000      	b.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8003654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003656:	7dfb      	ldrb	r3, [r7, #23]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10a      	bne.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800365c:	4b2b      	ldr	r3, [pc, #172]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800365e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003660:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800366a:	4928      	ldr	r1, [pc, #160]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800366c:	4313      	orrs	r3, r2
 800366e:	658b      	str	r3, [r1, #88]	; 0x58
 8003670:	e001      	b.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003672:	7dfb      	ldrb	r3, [r7, #23]
 8003674:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d02f      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003686:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800368a:	d00e      	beq.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x582>
 800368c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003690:	d814      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x594>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d015      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003696:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800369a:	d10f      	bne.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800369c:	4b1b      	ldr	r3, [pc, #108]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	4a1a      	ldr	r2, [pc, #104]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036a6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036a8:	e00c      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	3304      	adds	r3, #4
 80036ae:	2101      	movs	r1, #1
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 ff37 	bl	8004524 <RCCEx_PLL2_Config>
 80036b6:	4603      	mov	r3, r0
 80036b8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80036ba:	e003      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	75fb      	strb	r3, [r7, #23]
      break;
 80036c0:	e000      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80036c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036c4:	7dfb      	ldrb	r3, [r7, #23]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d109      	bne.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036ca:	4b10      	ldr	r3, [pc, #64]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036d6:	490d      	ldr	r1, [pc, #52]	; (800370c <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	650b      	str	r3, [r1, #80]	; 0x50
 80036dc:	e001      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036de:	7dfb      	ldrb	r3, [r7, #23]
 80036e0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d033      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d81c      	bhi.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80036f6:	a201      	add	r2, pc, #4	; (adr r2, 80036fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 80036f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036fc:	08003737 	.word	0x08003737
 8003700:	08003711 	.word	0x08003711
 8003704:	0800371f 	.word	0x0800371f
 8003708:	08003737 	.word	0x08003737
 800370c:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003710:	4bb8      	ldr	r3, [pc, #736]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003714:	4ab7      	ldr	r2, [pc, #732]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003716:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800371a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800371c:	e00c      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	3304      	adds	r3, #4
 8003722:	2102      	movs	r1, #2
 8003724:	4618      	mov	r0, r3
 8003726:	f000 fefd 	bl	8004524 <RCCEx_PLL2_Config>
 800372a:	4603      	mov	r3, r0
 800372c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800372e:	e003      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	75fb      	strb	r3, [r7, #23]
      break;
 8003734:	e000      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003738:	7dfb      	ldrb	r3, [r7, #23]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800373e:	4bad      	ldr	r3, [pc, #692]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003742:	f023 0203 	bic.w	r2, r3, #3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	49aa      	ldr	r1, [pc, #680]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800374c:	4313      	orrs	r3, r2
 800374e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003750:	e001      	b.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	2b00      	cmp	r3, #0
 8003760:	f000 8086 	beq.w	8003870 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003764:	4ba4      	ldr	r3, [pc, #656]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4aa3      	ldr	r2, [pc, #652]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800376a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800376e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003770:	f7fd fc98 	bl	80010a4 <HAL_GetTick>
 8003774:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003776:	e009      	b.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003778:	f7fd fc94 	bl	80010a4 <HAL_GetTick>
 800377c:	4602      	mov	r2, r0
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	1ad3      	subs	r3, r2, r3
 8003782:	2b64      	cmp	r3, #100	; 0x64
 8003784:	d902      	bls.n	800378c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	75fb      	strb	r3, [r7, #23]
        break;
 800378a:	e005      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800378c:	4b9a      	ldr	r3, [pc, #616]	; (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003794:	2b00      	cmp	r3, #0
 8003796:	d0ef      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003798:	7dfb      	ldrb	r3, [r7, #23]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d166      	bne.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800379e:	4b95      	ldr	r3, [pc, #596]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037a8:	4053      	eors	r3, r2
 80037aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d013      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b2:	4b90      	ldr	r3, [pc, #576]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80037bc:	4b8d      	ldr	r3, [pc, #564]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	4a8c      	ldr	r2, [pc, #560]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80037c8:	4b8a      	ldr	r3, [pc, #552]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037cc:	4a89      	ldr	r2, [pc, #548]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037d2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80037d4:	4a87      	ldr	r2, [pc, #540]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037e4:	d115      	bne.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e6:	f7fd fc5d 	bl	80010a4 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80037ec:	e00b      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037ee:	f7fd fc59 	bl	80010a4 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d902      	bls.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	75fb      	strb	r3, [r7, #23]
            break;
 8003804:	e005      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003806:	4b7b      	ldr	r3, [pc, #492]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380a:	f003 0302 	and.w	r3, r3, #2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d0ed      	beq.n	80037ee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003812:	7dfb      	ldrb	r3, [r7, #23]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d126      	bne.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800381e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003822:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003826:	d10d      	bne.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003828:	4b72      	ldr	r3, [pc, #456]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003836:	0919      	lsrs	r1, r3, #4
 8003838:	4b70      	ldr	r3, [pc, #448]	; (80039fc <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800383a:	400b      	ands	r3, r1
 800383c:	496d      	ldr	r1, [pc, #436]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800383e:	4313      	orrs	r3, r2
 8003840:	610b      	str	r3, [r1, #16]
 8003842:	e005      	b.n	8003850 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003844:	4b6b      	ldr	r3, [pc, #428]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	4a6a      	ldr	r2, [pc, #424]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800384a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800384e:	6113      	str	r3, [r2, #16]
 8003850:	4b68      	ldr	r3, [pc, #416]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003852:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800385a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385e:	4965      	ldr	r1, [pc, #404]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003860:	4313      	orrs	r3, r2
 8003862:	670b      	str	r3, [r1, #112]	; 0x70
 8003864:	e004      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003866:	7dfb      	ldrb	r3, [r7, #23]
 8003868:	75bb      	strb	r3, [r7, #22]
 800386a:	e001      	b.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800386c:	7dfb      	ldrb	r3, [r7, #23]
 800386e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d07e      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003880:	2b28      	cmp	r3, #40	; 0x28
 8003882:	d867      	bhi.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003884:	a201      	add	r2, pc, #4	; (adr r2, 800388c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388a:	bf00      	nop
 800388c:	0800395b 	.word	0x0800395b
 8003890:	08003955 	.word	0x08003955
 8003894:	08003955 	.word	0x08003955
 8003898:	08003955 	.word	0x08003955
 800389c:	08003955 	.word	0x08003955
 80038a0:	08003955 	.word	0x08003955
 80038a4:	08003955 	.word	0x08003955
 80038a8:	08003955 	.word	0x08003955
 80038ac:	08003931 	.word	0x08003931
 80038b0:	08003955 	.word	0x08003955
 80038b4:	08003955 	.word	0x08003955
 80038b8:	08003955 	.word	0x08003955
 80038bc:	08003955 	.word	0x08003955
 80038c0:	08003955 	.word	0x08003955
 80038c4:	08003955 	.word	0x08003955
 80038c8:	08003955 	.word	0x08003955
 80038cc:	08003943 	.word	0x08003943
 80038d0:	08003955 	.word	0x08003955
 80038d4:	08003955 	.word	0x08003955
 80038d8:	08003955 	.word	0x08003955
 80038dc:	08003955 	.word	0x08003955
 80038e0:	08003955 	.word	0x08003955
 80038e4:	08003955 	.word	0x08003955
 80038e8:	08003955 	.word	0x08003955
 80038ec:	0800395b 	.word	0x0800395b
 80038f0:	08003955 	.word	0x08003955
 80038f4:	08003955 	.word	0x08003955
 80038f8:	08003955 	.word	0x08003955
 80038fc:	08003955 	.word	0x08003955
 8003900:	08003955 	.word	0x08003955
 8003904:	08003955 	.word	0x08003955
 8003908:	08003955 	.word	0x08003955
 800390c:	0800395b 	.word	0x0800395b
 8003910:	08003955 	.word	0x08003955
 8003914:	08003955 	.word	0x08003955
 8003918:	08003955 	.word	0x08003955
 800391c:	08003955 	.word	0x08003955
 8003920:	08003955 	.word	0x08003955
 8003924:	08003955 	.word	0x08003955
 8003928:	08003955 	.word	0x08003955
 800392c:	0800395b 	.word	0x0800395b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	2101      	movs	r1, #1
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fdf4 	bl	8004524 <RCCEx_PLL2_Config>
 800393c:	4603      	mov	r3, r0
 800393e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003940:	e00c      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	3324      	adds	r3, #36	; 0x24
 8003946:	2101      	movs	r1, #1
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fe9d 	bl	8004688 <RCCEx_PLL3_Config>
 800394e:	4603      	mov	r3, r0
 8003950:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003952:	e003      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	75fb      	strb	r3, [r7, #23]
      break;
 8003958:	e000      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800395a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800395c:	7dfb      	ldrb	r3, [r7, #23]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d109      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003966:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800396e:	4921      	ldr	r1, [pc, #132]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	654b      	str	r3, [r1, #84]	; 0x54
 8003974:	e001      	b.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003976:	7dfb      	ldrb	r3, [r7, #23]
 8003978:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	d03e      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800398a:	2b05      	cmp	r3, #5
 800398c:	d820      	bhi.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800398e:	a201      	add	r2, pc, #4	; (adr r2, 8003994 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039d7 	.word	0x080039d7
 8003998:	080039ad 	.word	0x080039ad
 800399c:	080039bf 	.word	0x080039bf
 80039a0:	080039d7 	.word	0x080039d7
 80039a4:	080039d7 	.word	0x080039d7
 80039a8:	080039d7 	.word	0x080039d7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3304      	adds	r3, #4
 80039b0:	2101      	movs	r1, #1
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fdb6 	bl	8004524 <RCCEx_PLL2_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039bc:	e00c      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	3324      	adds	r3, #36	; 0x24
 80039c2:	2101      	movs	r1, #1
 80039c4:	4618      	mov	r0, r3
 80039c6:	f000 fe5f 	bl	8004688 <RCCEx_PLL3_Config>
 80039ca:	4603      	mov	r3, r0
 80039cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80039ce:	e003      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	75fb      	strb	r3, [r7, #23]
      break;
 80039d4:	e000      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80039d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d110      	bne.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80039de:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039e2:	f023 0207 	bic.w	r2, r3, #7
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ea:	4902      	ldr	r1, [pc, #8]	; (80039f4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80039ec:	4313      	orrs	r3, r2
 80039ee:	654b      	str	r3, [r1, #84]	; 0x54
 80039f0:	e008      	b.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80039f2:	bf00      	nop
 80039f4:	58024400 	.word	0x58024400
 80039f8:	58024800 	.word	0x58024800
 80039fc:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a00:	7dfb      	ldrb	r3, [r7, #23]
 8003a02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d039      	beq.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a16:	2b05      	cmp	r3, #5
 8003a18:	d820      	bhi.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x934>
 8003a1a:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8003a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a20:	08003a63 	.word	0x08003a63
 8003a24:	08003a39 	.word	0x08003a39
 8003a28:	08003a4b 	.word	0x08003a4b
 8003a2c:	08003a63 	.word	0x08003a63
 8003a30:	08003a63 	.word	0x08003a63
 8003a34:	08003a63 	.word	0x08003a63
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fd70 	bl	8004524 <RCCEx_PLL2_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a48:	e00c      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	3324      	adds	r3, #36	; 0x24
 8003a4e:	2101      	movs	r1, #1
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fe19 	bl	8004688 <RCCEx_PLL3_Config>
 8003a56:	4603      	mov	r3, r0
 8003a58:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003a5a:	e003      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a60:	e000      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8003a62:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a64:	7dfb      	ldrb	r3, [r7, #23]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d10a      	bne.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a6a:	4bb7      	ldr	r3, [pc, #732]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	f023 0207 	bic.w	r2, r3, #7
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a78:	49b3      	ldr	r1, [pc, #716]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	658b      	str	r3, [r1, #88]	; 0x58
 8003a7e:	e001      	b.n	8003a84 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
 8003a82:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d04b      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a9a:	d02e      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8003a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aa0:	d828      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aa6:	d02a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aac:	d822      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003aae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ab2:	d026      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003ab4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003ab8:	d81c      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003aba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003abe:	d010      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8003ac0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ac4:	d816      	bhi.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d01d      	beq.n	8003b06 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003aca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ace:	d111      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	2100      	movs	r1, #0
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fd24 	bl	8004524 <RCCEx_PLL2_Config>
 8003adc:	4603      	mov	r3, r0
 8003ade:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003ae0:	e012      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	3324      	adds	r3, #36	; 0x24
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 fdcd 	bl	8004688 <RCCEx_PLL3_Config>
 8003aee:	4603      	mov	r3, r0
 8003af0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003af2:	e009      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	75fb      	strb	r3, [r7, #23]
      break;
 8003af8:	e006      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003afa:	bf00      	nop
 8003afc:	e004      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003afe:	bf00      	nop
 8003b00:	e002      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003b02:	bf00      	nop
 8003b04:	e000      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8003b06:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b08:	7dfb      	ldrb	r3, [r7, #23]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b0e:	4b8e      	ldr	r3, [pc, #568]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b12:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b1c:	498a      	ldr	r1, [pc, #552]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	654b      	str	r3, [r1, #84]	; 0x54
 8003b22:	e001      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	7dfb      	ldrb	r3, [r7, #23]
 8003b26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d04b      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b3a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b3e:	d02e      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8003b40:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003b44:	d828      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b4a:	d02a      	beq.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003b4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b50:	d822      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b56:	d026      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003b58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b5c:	d81c      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b62:	d010      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8003b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b68:	d816      	bhi.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d01d      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003b6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b72:	d111      	bne.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	2100      	movs	r1, #0
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fcd2 	bl	8004524 <RCCEx_PLL2_Config>
 8003b80:	4603      	mov	r3, r0
 8003b82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b84:	e012      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	3324      	adds	r3, #36	; 0x24
 8003b8a:	2102      	movs	r1, #2
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f000 fd7b 	bl	8004688 <RCCEx_PLL3_Config>
 8003b92:	4603      	mov	r3, r0
 8003b94:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8003b96:	e009      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b9c:	e006      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003b9e:	bf00      	nop
 8003ba0:	e004      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ba2:	bf00      	nop
 8003ba4:	e002      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003ba6:	bf00      	nop
 8003ba8:	e000      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8003baa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bac:	7dfb      	ldrb	r3, [r7, #23]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10a      	bne.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bb2:	4b65      	ldr	r3, [pc, #404]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bc0:	4961      	ldr	r1, [pc, #388]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	658b      	str	r3, [r1, #88]	; 0x58
 8003bc6:	e001      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bc8:	7dfb      	ldrb	r3, [r7, #23]
 8003bca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d04b      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003bde:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003be2:	d02e      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8003be4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003be8:	d828      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003bea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bee:	d02a      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8003bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bf4:	d822      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003bf6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003bfa:	d026      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003bfc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003c00:	d81c      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c06:	d010      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8003c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0c:	d816      	bhi.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d01d      	beq.n	8003c4e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003c12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c16:	d111      	bne.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3304      	adds	r3, #4
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fc80 	bl	8004524 <RCCEx_PLL2_Config>
 8003c24:	4603      	mov	r3, r0
 8003c26:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c28:	e012      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	3324      	adds	r3, #36	; 0x24
 8003c2e:	2102      	movs	r1, #2
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fd29 	bl	8004688 <RCCEx_PLL3_Config>
 8003c36:	4603      	mov	r3, r0
 8003c38:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003c3a:	e009      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c40:	e006      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c42:	bf00      	nop
 8003c44:	e004      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c46:	bf00      	nop
 8003c48:	e002      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e000      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8003c4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003c56:	4b3c      	ldr	r3, [pc, #240]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c64:	4938      	ldr	r1, [pc, #224]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	658b      	str	r3, [r1, #88]	; 0x58
 8003c6a:	e001      	b.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c6c:	7dfb      	ldrb	r3, [r7, #23]
 8003c6e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01a      	beq.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c86:	d10a      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3324      	adds	r3, #36	; 0x24
 8003c8c:	2102      	movs	r1, #2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f000 fcfa 	bl	8004688 <RCCEx_PLL3_Config>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003c9e:	4b2a      	ldr	r3, [pc, #168]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003cac:	4926      	ldr	r1, [pc, #152]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0310 	and.w	r3, r3, #16
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d01a      	beq.n	8003cf4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc8:	d10a      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	3324      	adds	r3, #36	; 0x24
 8003cce:	2102      	movs	r1, #2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f000 fcd9 	bl	8004688 <RCCEx_PLL3_Config>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ce0:	4b19      	ldr	r3, [pc, #100]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cee:	4916      	ldr	r1, [pc, #88]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d036      	beq.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d0a:	d01f      	beq.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8003d0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d10:	d817      	bhi.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8003d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1a:	d009      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8003d1c:	e011      	b.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3304      	adds	r3, #4
 8003d22:	2100      	movs	r1, #0
 8003d24:	4618      	mov	r0, r3
 8003d26:	f000 fbfd 	bl	8004524 <RCCEx_PLL2_Config>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d2e:	e00e      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3324      	adds	r3, #36	; 0x24
 8003d34:	2102      	movs	r1, #2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fca6 	bl	8004688 <RCCEx_PLL3_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8003d40:	e005      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	75fb      	strb	r3, [r7, #23]
      break;
 8003d46:	e002      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8003d48:	58024400 	.word	0x58024400
      break;
 8003d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d4e:	7dfb      	ldrb	r3, [r7, #23]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10a      	bne.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d54:	4b93      	ldr	r3, [pc, #588]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d62:	4990      	ldr	r1, [pc, #576]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	658b      	str	r3, [r1, #88]	; 0x58
 8003d68:	e001      	b.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d033      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d80:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d84:	d01c      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8003d86:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003d8a:	d816      	bhi.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8003d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d90:	d003      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8003d92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003d96:	d007      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8003d98:	e00f      	b.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d9a:	4b82      	ldr	r3, [pc, #520]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9e:	4a81      	ldr	r2, [pc, #516]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003da0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003da4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003da6:	e00c      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	3324      	adds	r3, #36	; 0x24
 8003dac:	2101      	movs	r1, #1
 8003dae:	4618      	mov	r0, r3
 8003db0:	f000 fc6a 	bl	8004688 <RCCEx_PLL3_Config>
 8003db4:	4603      	mov	r3, r0
 8003db6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003db8:	e003      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	75fb      	strb	r3, [r7, #23]
      break;
 8003dbe:	e000      	b.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8003dc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dc2:	7dfb      	ldrb	r3, [r7, #23]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dc8:	4b76      	ldr	r3, [pc, #472]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dcc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dd6:	4973      	ldr	r1, [pc, #460]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	654b      	str	r3, [r1, #84]	; 0x54
 8003ddc:	e001      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dde:	7dfb      	ldrb	r3, [r7, #23]
 8003de0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d029      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d003      	beq.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8003df6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dfa:	d007      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8003dfc:	e00f      	b.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003dfe:	4b69      	ldr	r3, [pc, #420]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	4a68      	ldr	r2, [pc, #416]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e08:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e0a:	e00b      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	2102      	movs	r1, #2
 8003e12:	4618      	mov	r0, r3
 8003e14:	f000 fb86 	bl	8004524 <RCCEx_PLL2_Config>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003e1c:	e002      	b.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	75fb      	strb	r3, [r7, #23]
      break;
 8003e22:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e24:	7dfb      	ldrb	r3, [r7, #23]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d109      	bne.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003e2a:	4b5e      	ldr	r3, [pc, #376]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e36:	495b      	ldr	r1, [pc, #364]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e3c:	e001      	b.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e3e:	7dfb      	ldrb	r3, [r7, #23]
 8003e40:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d00a      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3324      	adds	r3, #36	; 0x24
 8003e52:	2102      	movs	r1, #2
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fc17 	bl	8004688 <RCCEx_PLL3_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d001      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d030      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e78:	d017      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8003e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e7e:	d811      	bhi.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e84:	d013      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8003e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e8a:	d80b      	bhi.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d010      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8003e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e94:	d106      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e96:	4b43      	ldr	r3, [pc, #268]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9a:	4a42      	ldr	r2, [pc, #264]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8003ea2:	e007      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	75fb      	strb	r3, [r7, #23]
      break;
 8003ea8:	e004      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003eaa:	bf00      	nop
 8003eac:	e002      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003eae:	bf00      	nop
 8003eb0:	e000      	b.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8003eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003eb4:	7dfb      	ldrb	r3, [r7, #23]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d109      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003eba:	4b3a      	ldr	r3, [pc, #232]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ebe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ec6:	4937      	ldr	r1, [pc, #220]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	654b      	str	r3, [r1, #84]	; 0x54
 8003ecc:	e001      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ece:	7dfb      	ldrb	r3, [r7, #23]
 8003ed0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d008      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003ede:	4b31      	ldr	r3, [pc, #196]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eea:	492e      	ldr	r1, [pc, #184]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003eec:	4313      	orrs	r3, r2
 8003eee:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003efc:	4b29      	ldr	r3, [pc, #164]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003f0a:	4926      	ldr	r1, [pc, #152]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d008      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003f1c:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f20:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f28:	491e      	ldr	r1, [pc, #120]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f3a:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	4a19      	ldr	r2, [pc, #100]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003f44:	6113      	str	r3, [r2, #16]
 8003f46:	4b17      	ldr	r3, [pc, #92]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003f50:	4914      	ldr	r1, [pc, #80]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	da08      	bge.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f5e:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6a:	490e      	ldr	r1, [pc, #56]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d009      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f7c:	4b09      	ldr	r3, [pc, #36]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f8a:	4906      	ldr	r1, [pc, #24]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8003f90:	7dbb      	ldrb	r3, [r7, #22]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d101      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	e000      	b.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	58024400 	.word	0x58024400

08003fa8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003fac:	f7ff f860 	bl	8003070 <HAL_RCC_GetHCLKFreq>
 8003fb0:	4602      	mov	r2, r0
 8003fb2:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003fb4:	6a1b      	ldr	r3, [r3, #32]
 8003fb6:	091b      	lsrs	r3, r3, #4
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	4904      	ldr	r1, [pc, #16]	; (8003fd0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003fbe:	5ccb      	ldrb	r3, [r1, r3]
 8003fc0:	f003 031f 	and.w	r3, r3, #31
 8003fc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	58024400 	.word	0x58024400
 8003fd0:	08005e18 	.word	0x08005e18

08003fd4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003fdc:	4ba1      	ldr	r3, [pc, #644]	; (8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe0:	f003 0303 	and.w	r3, r3, #3
 8003fe4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003fe6:	4b9f      	ldr	r3, [pc, #636]	; (8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fea:	0b1b      	lsrs	r3, r3, #12
 8003fec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ff0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003ff2:	4b9c      	ldr	r3, [pc, #624]	; (8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	091b      	lsrs	r3, r3, #4
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003ffe:	4b99      	ldr	r3, [pc, #612]	; (8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004002:	08db      	lsrs	r3, r3, #3
 8004004:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	fb02 f303 	mul.w	r3, r2, r3
 800400e:	ee07 3a90 	vmov	s15, r3
 8004012:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004016:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2b00      	cmp	r3, #0
 800401e:	f000 8111 	beq.w	8004244 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b02      	cmp	r3, #2
 8004026:	f000 8083 	beq.w	8004130 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	2b02      	cmp	r3, #2
 800402e:	f200 80a1 	bhi.w	8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d003      	beq.n	8004040 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d056      	beq.n	80040ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800403e:	e099      	b.n	8004174 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004040:	4b88      	ldr	r3, [pc, #544]	; (8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d02d      	beq.n	80040a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800404c:	4b85      	ldr	r3, [pc, #532]	; (8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	08db      	lsrs	r3, r3, #3
 8004052:	f003 0303 	and.w	r3, r3, #3
 8004056:	4a84      	ldr	r2, [pc, #528]	; (8004268 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004058:	fa22 f303 	lsr.w	r3, r2, r3
 800405c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	ee07 3a90 	vmov	s15, r3
 8004064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004076:	4b7b      	ldr	r3, [pc, #492]	; (8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800407e:	ee07 3a90 	vmov	s15, r3
 8004082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004086:	ed97 6a03 	vldr	s12, [r7, #12]
 800408a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800426c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800408e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004096:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800409a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800409e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80040a6:	e087      	b.n	80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	ee07 3a90 	vmov	s15, r3
 80040ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004270 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80040b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040ba:	4b6a      	ldr	r3, [pc, #424]	; (8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c2:	ee07 3a90 	vmov	s15, r3
 80040c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80040ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800426c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80040d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80040de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80040ea:	e065      	b.n	80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	ee07 3a90 	vmov	s15, r3
 80040f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80040fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040fe:	4b59      	ldr	r3, [pc, #356]	; (8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004106:	ee07 3a90 	vmov	s15, r3
 800410a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800410e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004112:	eddf 5a56 	vldr	s11, [pc, #344]	; 800426c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800411a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800411e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004126:	ee67 7a27 	vmul.f32	s15, s14, s15
 800412a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800412e:	e043      	b.n	80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	ee07 3a90 	vmov	s15, r3
 8004136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800413a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004278 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800413e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004142:	4b48      	ldr	r3, [pc, #288]	; (8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004146:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800414a:	ee07 3a90 	vmov	s15, r3
 800414e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004152:	ed97 6a03 	vldr	s12, [r7, #12]
 8004156:	eddf 5a45 	vldr	s11, [pc, #276]	; 800426c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800415a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800415e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004162:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004166:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800416a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800416e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004172:	e021      	b.n	80041b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	ee07 3a90 	vmov	s15, r3
 800417a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800417e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004182:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004186:	4b37      	ldr	r3, [pc, #220]	; (8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800418e:	ee07 3a90 	vmov	s15, r3
 8004192:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004196:	ed97 6a03 	vldr	s12, [r7, #12]
 800419a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800426c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800419e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80041b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80041b8:	4b2a      	ldr	r3, [pc, #168]	; (8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041bc:	0a5b      	lsrs	r3, r3, #9
 80041be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80041d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80041d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80041da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041de:	ee17 2a90 	vmov	r2, s15
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80041e6:	4b1f      	ldr	r3, [pc, #124]	; (8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	0c1b      	lsrs	r3, r3, #16
 80041ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041f0:	ee07 3a90 	vmov	s15, r3
 80041f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80041fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004200:	edd7 6a07 	vldr	s13, [r7, #28]
 8004204:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800420c:	ee17 2a90 	vmov	r2, s15
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004214:	4b13      	ldr	r3, [pc, #76]	; (8004264 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004218:	0e1b      	lsrs	r3, r3, #24
 800421a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004226:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800422a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800422e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004232:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004236:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800423a:	ee17 2a90 	vmov	r2, s15
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004242:	e008      	b.n	8004256 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	609a      	str	r2, [r3, #8]
}
 8004256:	bf00      	nop
 8004258:	3724      	adds	r7, #36	; 0x24
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	58024400 	.word	0x58024400
 8004268:	03d09000 	.word	0x03d09000
 800426c:	46000000 	.word	0x46000000
 8004270:	4c742400 	.word	0x4c742400
 8004274:	4a742400 	.word	0x4a742400
 8004278:	4af42400 	.word	0x4af42400

0800427c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800427c:	b480      	push	{r7}
 800427e:	b089      	sub	sp, #36	; 0x24
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004284:	4ba1      	ldr	r3, [pc, #644]	; (800450c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004288:	f003 0303 	and.w	r3, r3, #3
 800428c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800428e:	4b9f      	ldr	r3, [pc, #636]	; (800450c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004292:	0d1b      	lsrs	r3, r3, #20
 8004294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004298:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800429a:	4b9c      	ldr	r3, [pc, #624]	; (800450c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	0a1b      	lsrs	r3, r3, #8
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80042a6:	4b99      	ldr	r3, [pc, #612]	; (800450c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	08db      	lsrs	r3, r3, #3
 80042ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80042b0:	693a      	ldr	r2, [r7, #16]
 80042b2:	fb02 f303 	mul.w	r3, r2, r3
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	f000 8111 	beq.w	80044ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80042ca:	69bb      	ldr	r3, [r7, #24]
 80042cc:	2b02      	cmp	r3, #2
 80042ce:	f000 8083 	beq.w	80043d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	f200 80a1 	bhi.w	800441c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d003      	beq.n	80042e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d056      	beq.n	8004394 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80042e6:	e099      	b.n	800441c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80042e8:	4b88      	ldr	r3, [pc, #544]	; (800450c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0320 	and.w	r3, r3, #32
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d02d      	beq.n	8004350 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80042f4:	4b85      	ldr	r3, [pc, #532]	; (800450c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	08db      	lsrs	r3, r3, #3
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	4a84      	ldr	r2, [pc, #528]	; (8004510 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004300:	fa22 f303 	lsr.w	r3, r2, r3
 8004304:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	ee07 3a90 	vmov	s15, r3
 800430c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	ee07 3a90 	vmov	s15, r3
 8004316:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800431a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800431e:	4b7b      	ldr	r3, [pc, #492]	; (800450c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004326:	ee07 3a90 	vmov	s15, r3
 800432a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800432e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004332:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004336:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800433a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800433e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004342:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004346:	ee67 7a27 	vmul.f32	s15, s14, s15
 800434a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800434e:	e087      	b.n	8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	ee07 3a90 	vmov	s15, r3
 8004356:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800435a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004518 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800435e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004362:	4b6a      	ldr	r3, [pc, #424]	; (800450c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800436a:	ee07 3a90 	vmov	s15, r3
 800436e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004372:	ed97 6a03 	vldr	s12, [r7, #12]
 8004376:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800437a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800437e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004382:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004386:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800438a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800438e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004392:	e065      	b.n	8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	ee07 3a90 	vmov	s15, r3
 800439a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800439e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800451c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80043a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043a6:	4b59      	ldr	r3, [pc, #356]	; (800450c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043ae:	ee07 3a90 	vmov	s15, r3
 80043b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80043ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80043be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80043c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80043c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80043ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80043ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80043d6:	e043      	b.n	8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	ee07 3a90 	vmov	s15, r3
 80043de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004520 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80043e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80043ea:	4b48      	ldr	r3, [pc, #288]	; (800450c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043f2:	ee07 3a90 	vmov	s15, r3
 80043f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80043fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80043fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800440a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800440e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004416:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800441a:	e021      	b.n	8004460 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	ee07 3a90 	vmov	s15, r3
 8004422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004426:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800451c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800442a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800442e:	4b37      	ldr	r3, [pc, #220]	; (800450c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004436:	ee07 3a90 	vmov	s15, r3
 800443a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800443e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004442:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004514 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800444a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800444e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800445a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800445e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004460:	4b2a      	ldr	r3, [pc, #168]	; (800450c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004464:	0a5b      	lsrs	r3, r3, #9
 8004466:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004476:	ee37 7a87 	vadd.f32	s14, s15, s14
 800447a:	edd7 6a07 	vldr	s13, [r7, #28]
 800447e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004486:	ee17 2a90 	vmov	r2, s15
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800448e:	4b1f      	ldr	r3, [pc, #124]	; (800450c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	0c1b      	lsrs	r3, r3, #16
 8004494:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004498:	ee07 3a90 	vmov	s15, r3
 800449c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80044ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044b4:	ee17 2a90 	vmov	r2, s15
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80044bc:	4b13      	ldr	r3, [pc, #76]	; (800450c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c0:	0e1b      	lsrs	r3, r3, #24
 80044c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80044d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80044da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80044de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80044e2:	ee17 2a90 	vmov	r2, s15
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80044ea:	e008      	b.n	80044fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	609a      	str	r2, [r3, #8]
}
 80044fe:	bf00      	nop
 8004500:	3724      	adds	r7, #36	; 0x24
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	58024400 	.word	0x58024400
 8004510:	03d09000 	.word	0x03d09000
 8004514:	46000000 	.word	0x46000000
 8004518:	4c742400 	.word	0x4c742400
 800451c:	4a742400 	.word	0x4a742400
 8004520:	4af42400 	.word	0x4af42400

08004524 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004532:	4b53      	ldr	r3, [pc, #332]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 8004534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	2b03      	cmp	r3, #3
 800453c:	d101      	bne.n	8004542 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e099      	b.n	8004676 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004542:	4b4f      	ldr	r3, [pc, #316]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a4e      	ldr	r2, [pc, #312]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 8004548:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800454c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800454e:	f7fc fda9 	bl	80010a4 <HAL_GetTick>
 8004552:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004554:	e008      	b.n	8004568 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004556:	f7fc fda5 	bl	80010a4 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	2b02      	cmp	r3, #2
 8004562:	d901      	bls.n	8004568 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e086      	b.n	8004676 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004568:	4b45      	ldr	r3, [pc, #276]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1f0      	bne.n	8004556 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004574:	4b42      	ldr	r3, [pc, #264]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	031b      	lsls	r3, r3, #12
 8004582:	493f      	ldr	r1, [pc, #252]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 8004584:	4313      	orrs	r3, r2
 8004586:	628b      	str	r3, [r1, #40]	; 0x28
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	3b01      	subs	r3, #1
 800458e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	3b01      	subs	r3, #1
 8004598:	025b      	lsls	r3, r3, #9
 800459a:	b29b      	uxth	r3, r3
 800459c:	431a      	orrs	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	3b01      	subs	r3, #1
 80045a4:	041b      	lsls	r3, r3, #16
 80045a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	3b01      	subs	r3, #1
 80045b2:	061b      	lsls	r3, r3, #24
 80045b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80045b8:	4931      	ldr	r1, [pc, #196]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80045be:	4b30      	ldr	r3, [pc, #192]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 80045c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	492d      	ldr	r1, [pc, #180]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80045d0:	4b2b      	ldr	r3, [pc, #172]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 80045d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045d4:	f023 0220 	bic.w	r2, r3, #32
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	4928      	ldr	r1, [pc, #160]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80045e2:	4b27      	ldr	r3, [pc, #156]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 80045e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e6:	4a26      	ldr	r2, [pc, #152]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 80045e8:	f023 0310 	bic.w	r3, r3, #16
 80045ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80045ee:	4b24      	ldr	r3, [pc, #144]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 80045f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045f2:	4b24      	ldr	r3, [pc, #144]	; (8004684 <RCCEx_PLL2_Config+0x160>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	69d2      	ldr	r2, [r2, #28]
 80045fa:	00d2      	lsls	r2, r2, #3
 80045fc:	4920      	ldr	r1, [pc, #128]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 80045fe:	4313      	orrs	r3, r2
 8004600:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004602:	4b1f      	ldr	r3, [pc, #124]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 8004604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004606:	4a1e      	ldr	r2, [pc, #120]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 8004608:	f043 0310 	orr.w	r3, r3, #16
 800460c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d106      	bne.n	8004622 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004614:	4b1a      	ldr	r3, [pc, #104]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 8004616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004618:	4a19      	ldr	r2, [pc, #100]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 800461a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800461e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004620:	e00f      	b.n	8004642 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d106      	bne.n	8004636 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004628:	4b15      	ldr	r3, [pc, #84]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	4a14      	ldr	r2, [pc, #80]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 800462e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004632:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004634:	e005      	b.n	8004642 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	4a11      	ldr	r2, [pc, #68]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 800463c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004640:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a0e      	ldr	r2, [pc, #56]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 8004648:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800464c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800464e:	f7fc fd29 	bl	80010a4 <HAL_GetTick>
 8004652:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004654:	e008      	b.n	8004668 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004656:	f7fc fd25 	bl	80010a4 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e006      	b.n	8004676 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <RCCEx_PLL2_Config+0x15c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d0f0      	beq.n	8004656 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004674:	7bfb      	ldrb	r3, [r7, #15]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	58024400 	.word	0x58024400
 8004684:	ffff0007 	.word	0xffff0007

08004688 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004692:	2300      	movs	r3, #0
 8004694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004696:	4b53      	ldr	r3, [pc, #332]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 8004698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800469a:	f003 0303 	and.w	r3, r3, #3
 800469e:	2b03      	cmp	r3, #3
 80046a0:	d101      	bne.n	80046a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e099      	b.n	80047da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80046a6:	4b4f      	ldr	r3, [pc, #316]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a4e      	ldr	r2, [pc, #312]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 80046ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046b2:	f7fc fcf7 	bl	80010a4 <HAL_GetTick>
 80046b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046b8:	e008      	b.n	80046cc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80046ba:	f7fc fcf3 	bl	80010a4 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b02      	cmp	r3, #2
 80046c6:	d901      	bls.n	80046cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e086      	b.n	80047da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80046cc:	4b45      	ldr	r3, [pc, #276]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f0      	bne.n	80046ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80046d8:	4b42      	ldr	r3, [pc, #264]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 80046da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	051b      	lsls	r3, r3, #20
 80046e6:	493f      	ldr	r1, [pc, #252]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 80046e8:	4313      	orrs	r3, r2
 80046ea:	628b      	str	r3, [r1, #40]	; 0x28
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	3b01      	subs	r3, #1
 80046f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	025b      	lsls	r3, r3, #9
 80046fe:	b29b      	uxth	r3, r3
 8004700:	431a      	orrs	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
 8004706:	3b01      	subs	r3, #1
 8004708:	041b      	lsls	r3, r3, #16
 800470a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	3b01      	subs	r3, #1
 8004716:	061b      	lsls	r3, r3, #24
 8004718:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800471c:	4931      	ldr	r1, [pc, #196]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 800471e:	4313      	orrs	r3, r2
 8004720:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004722:	4b30      	ldr	r3, [pc, #192]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 8004724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004726:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	492d      	ldr	r1, [pc, #180]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 8004730:	4313      	orrs	r3, r2
 8004732:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004734:	4b2b      	ldr	r3, [pc, #172]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 8004736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004738:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	4928      	ldr	r1, [pc, #160]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 8004742:	4313      	orrs	r3, r2
 8004744:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004746:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	4a26      	ldr	r2, [pc, #152]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 800474c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004750:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004752:	4b24      	ldr	r3, [pc, #144]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 8004754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004756:	4b24      	ldr	r3, [pc, #144]	; (80047e8 <RCCEx_PLL3_Config+0x160>)
 8004758:	4013      	ands	r3, r2
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	69d2      	ldr	r2, [r2, #28]
 800475e:	00d2      	lsls	r2, r2, #3
 8004760:	4920      	ldr	r1, [pc, #128]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 8004762:	4313      	orrs	r3, r2
 8004764:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004766:	4b1f      	ldr	r3, [pc, #124]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	4a1e      	ldr	r2, [pc, #120]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 800476c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004770:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d106      	bne.n	8004786 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004778:	4b1a      	ldr	r3, [pc, #104]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 800477a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 800477e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004782:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004784:	e00f      	b.n	80047a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d106      	bne.n	800479a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800478c:	4b15      	ldr	r3, [pc, #84]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 800478e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004790:	4a14      	ldr	r2, [pc, #80]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 8004792:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004796:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004798:	e005      	b.n	80047a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800479a:	4b12      	ldr	r3, [pc, #72]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	4a11      	ldr	r2, [pc, #68]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 80047a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80047a6:	4b0f      	ldr	r3, [pc, #60]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a0e      	ldr	r2, [pc, #56]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 80047ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b2:	f7fc fc77 	bl	80010a4 <HAL_GetTick>
 80047b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047b8:	e008      	b.n	80047cc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 80047ba:	f7fc fc73 	bl	80010a4 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e006      	b.n	80047da <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80047cc:	4b05      	ldr	r3, [pc, #20]	; (80047e4 <RCCEx_PLL3_Config+0x15c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	58024400 	.word	0x58024400
 80047e8:	ffff0007 	.word	0xffff0007

080047ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b082      	sub	sp, #8
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e042      	b.n	8004884 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004804:	2b00      	cmp	r3, #0
 8004806:	d106      	bne.n	8004816 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f7fc fa01 	bl	8000c18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2224      	movs	r2, #36	; 0x24
 800481a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0201 	bic.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f82c 	bl	800488c <UART_SetConfig>
 8004834:	4603      	mov	r3, r0
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e022      	b.n	8004884 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 fd80 	bl	800534c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800485a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800486a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 fe07 	bl	8005490 <UART_CheckIdleState>
 8004882:	4603      	mov	r3, r0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3708      	adds	r7, #8
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800488c:	b5b0      	push	{r4, r5, r7, lr}
 800488e:	b08e      	sub	sp, #56	; 0x38
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004894:	2300      	movs	r3, #0
 8004896:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689a      	ldr	r2, [r3, #8]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	431a      	orrs	r2, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	4bbf      	ldr	r3, [pc, #764]	; (8004bb8 <UART_SetConfig+0x32c>)
 80048ba:	4013      	ands	r3, r2
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80048c2:	430b      	orrs	r3, r1
 80048c4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4ab5      	ldr	r2, [pc, #724]	; (8004bbc <UART_SetConfig+0x330>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a1b      	ldr	r3, [r3, #32]
 80048f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80048f2:	4313      	orrs	r3, r2
 80048f4:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	689a      	ldr	r2, [r3, #8]
 80048fc:	4bb0      	ldr	r3, [pc, #704]	; (8004bc0 <UART_SetConfig+0x334>)
 80048fe:	4013      	ands	r3, r2
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	6812      	ldr	r2, [r2, #0]
 8004904:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004906:	430b      	orrs	r3, r1
 8004908:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004910:	f023 010f 	bic.w	r1, r3, #15
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	430a      	orrs	r2, r1
 800491e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4aa7      	ldr	r2, [pc, #668]	; (8004bc4 <UART_SetConfig+0x338>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d176      	bne.n	8004a18 <UART_SetConfig+0x18c>
 800492a:	4ba7      	ldr	r3, [pc, #668]	; (8004bc8 <UART_SetConfig+0x33c>)
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004932:	2b28      	cmp	r3, #40	; 0x28
 8004934:	d86c      	bhi.n	8004a10 <UART_SetConfig+0x184>
 8004936:	a201      	add	r2, pc, #4	; (adr r2, 800493c <UART_SetConfig+0xb0>)
 8004938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800493c:	080049e1 	.word	0x080049e1
 8004940:	08004a11 	.word	0x08004a11
 8004944:	08004a11 	.word	0x08004a11
 8004948:	08004a11 	.word	0x08004a11
 800494c:	08004a11 	.word	0x08004a11
 8004950:	08004a11 	.word	0x08004a11
 8004954:	08004a11 	.word	0x08004a11
 8004958:	08004a11 	.word	0x08004a11
 800495c:	080049e9 	.word	0x080049e9
 8004960:	08004a11 	.word	0x08004a11
 8004964:	08004a11 	.word	0x08004a11
 8004968:	08004a11 	.word	0x08004a11
 800496c:	08004a11 	.word	0x08004a11
 8004970:	08004a11 	.word	0x08004a11
 8004974:	08004a11 	.word	0x08004a11
 8004978:	08004a11 	.word	0x08004a11
 800497c:	080049f1 	.word	0x080049f1
 8004980:	08004a11 	.word	0x08004a11
 8004984:	08004a11 	.word	0x08004a11
 8004988:	08004a11 	.word	0x08004a11
 800498c:	08004a11 	.word	0x08004a11
 8004990:	08004a11 	.word	0x08004a11
 8004994:	08004a11 	.word	0x08004a11
 8004998:	08004a11 	.word	0x08004a11
 800499c:	080049f9 	.word	0x080049f9
 80049a0:	08004a11 	.word	0x08004a11
 80049a4:	08004a11 	.word	0x08004a11
 80049a8:	08004a11 	.word	0x08004a11
 80049ac:	08004a11 	.word	0x08004a11
 80049b0:	08004a11 	.word	0x08004a11
 80049b4:	08004a11 	.word	0x08004a11
 80049b8:	08004a11 	.word	0x08004a11
 80049bc:	08004a01 	.word	0x08004a01
 80049c0:	08004a11 	.word	0x08004a11
 80049c4:	08004a11 	.word	0x08004a11
 80049c8:	08004a11 	.word	0x08004a11
 80049cc:	08004a11 	.word	0x08004a11
 80049d0:	08004a11 	.word	0x08004a11
 80049d4:	08004a11 	.word	0x08004a11
 80049d8:	08004a11 	.word	0x08004a11
 80049dc:	08004a09 	.word	0x08004a09
 80049e0:	2301      	movs	r3, #1
 80049e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049e6:	e222      	b.n	8004e2e <UART_SetConfig+0x5a2>
 80049e8:	2304      	movs	r3, #4
 80049ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049ee:	e21e      	b.n	8004e2e <UART_SetConfig+0x5a2>
 80049f0:	2308      	movs	r3, #8
 80049f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049f6:	e21a      	b.n	8004e2e <UART_SetConfig+0x5a2>
 80049f8:	2310      	movs	r3, #16
 80049fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80049fe:	e216      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004a00:	2320      	movs	r3, #32
 8004a02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a06:	e212      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004a08:	2340      	movs	r3, #64	; 0x40
 8004a0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a0e:	e20e      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a16:	e20a      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a6b      	ldr	r2, [pc, #428]	; (8004bcc <UART_SetConfig+0x340>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d130      	bne.n	8004a84 <UART_SetConfig+0x1f8>
 8004a22:	4b69      	ldr	r3, [pc, #420]	; (8004bc8 <UART_SetConfig+0x33c>)
 8004a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	d826      	bhi.n	8004a7c <UART_SetConfig+0x1f0>
 8004a2e:	a201      	add	r2, pc, #4	; (adr r2, 8004a34 <UART_SetConfig+0x1a8>)
 8004a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a34:	08004a4d 	.word	0x08004a4d
 8004a38:	08004a55 	.word	0x08004a55
 8004a3c:	08004a5d 	.word	0x08004a5d
 8004a40:	08004a65 	.word	0x08004a65
 8004a44:	08004a6d 	.word	0x08004a6d
 8004a48:	08004a75 	.word	0x08004a75
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a52:	e1ec      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004a54:	2304      	movs	r3, #4
 8004a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a5a:	e1e8      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004a5c:	2308      	movs	r3, #8
 8004a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a62:	e1e4      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004a64:	2310      	movs	r3, #16
 8004a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a6a:	e1e0      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004a6c:	2320      	movs	r3, #32
 8004a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a72:	e1dc      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004a74:	2340      	movs	r3, #64	; 0x40
 8004a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a7a:	e1d8      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004a7c:	2380      	movs	r3, #128	; 0x80
 8004a7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004a82:	e1d4      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a51      	ldr	r2, [pc, #324]	; (8004bd0 <UART_SetConfig+0x344>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d130      	bne.n	8004af0 <UART_SetConfig+0x264>
 8004a8e:	4b4e      	ldr	r3, [pc, #312]	; (8004bc8 <UART_SetConfig+0x33c>)
 8004a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a92:	f003 0307 	and.w	r3, r3, #7
 8004a96:	2b05      	cmp	r3, #5
 8004a98:	d826      	bhi.n	8004ae8 <UART_SetConfig+0x25c>
 8004a9a:	a201      	add	r2, pc, #4	; (adr r2, 8004aa0 <UART_SetConfig+0x214>)
 8004a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa0:	08004ab9 	.word	0x08004ab9
 8004aa4:	08004ac1 	.word	0x08004ac1
 8004aa8:	08004ac9 	.word	0x08004ac9
 8004aac:	08004ad1 	.word	0x08004ad1
 8004ab0:	08004ad9 	.word	0x08004ad9
 8004ab4:	08004ae1 	.word	0x08004ae1
 8004ab8:	2300      	movs	r3, #0
 8004aba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004abe:	e1b6      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004ac0:	2304      	movs	r3, #4
 8004ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ac6:	e1b2      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004ac8:	2308      	movs	r3, #8
 8004aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ace:	e1ae      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004ad0:	2310      	movs	r3, #16
 8004ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ad6:	e1aa      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004ad8:	2320      	movs	r3, #32
 8004ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ade:	e1a6      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004ae0:	2340      	movs	r3, #64	; 0x40
 8004ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ae6:	e1a2      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004aee:	e19e      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a37      	ldr	r2, [pc, #220]	; (8004bd4 <UART_SetConfig+0x348>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d130      	bne.n	8004b5c <UART_SetConfig+0x2d0>
 8004afa:	4b33      	ldr	r3, [pc, #204]	; (8004bc8 <UART_SetConfig+0x33c>)
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	f003 0307 	and.w	r3, r3, #7
 8004b02:	2b05      	cmp	r3, #5
 8004b04:	d826      	bhi.n	8004b54 <UART_SetConfig+0x2c8>
 8004b06:	a201      	add	r2, pc, #4	; (adr r2, 8004b0c <UART_SetConfig+0x280>)
 8004b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b0c:	08004b25 	.word	0x08004b25
 8004b10:	08004b2d 	.word	0x08004b2d
 8004b14:	08004b35 	.word	0x08004b35
 8004b18:	08004b3d 	.word	0x08004b3d
 8004b1c:	08004b45 	.word	0x08004b45
 8004b20:	08004b4d 	.word	0x08004b4d
 8004b24:	2300      	movs	r3, #0
 8004b26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b2a:	e180      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004b2c:	2304      	movs	r3, #4
 8004b2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b32:	e17c      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004b34:	2308      	movs	r3, #8
 8004b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b3a:	e178      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b42:	e174      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004b44:	2320      	movs	r3, #32
 8004b46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b4a:	e170      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004b4c:	2340      	movs	r3, #64	; 0x40
 8004b4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b52:	e16c      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004b54:	2380      	movs	r3, #128	; 0x80
 8004b56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b5a:	e168      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a1d      	ldr	r2, [pc, #116]	; (8004bd8 <UART_SetConfig+0x34c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d142      	bne.n	8004bec <UART_SetConfig+0x360>
 8004b66:	4b18      	ldr	r3, [pc, #96]	; (8004bc8 <UART_SetConfig+0x33c>)
 8004b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6a:	f003 0307 	and.w	r3, r3, #7
 8004b6e:	2b05      	cmp	r3, #5
 8004b70:	d838      	bhi.n	8004be4 <UART_SetConfig+0x358>
 8004b72:	a201      	add	r2, pc, #4	; (adr r2, 8004b78 <UART_SetConfig+0x2ec>)
 8004b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b78:	08004b91 	.word	0x08004b91
 8004b7c:	08004b99 	.word	0x08004b99
 8004b80:	08004ba1 	.word	0x08004ba1
 8004b84:	08004ba9 	.word	0x08004ba9
 8004b88:	08004bb1 	.word	0x08004bb1
 8004b8c:	08004bdd 	.word	0x08004bdd
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b96:	e14a      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004b98:	2304      	movs	r3, #4
 8004b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004b9e:	e146      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004ba0:	2308      	movs	r3, #8
 8004ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ba6:	e142      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004ba8:	2310      	movs	r3, #16
 8004baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bae:	e13e      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004bb0:	2320      	movs	r3, #32
 8004bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bb6:	e13a      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004bb8:	cfff69f3 	.word	0xcfff69f3
 8004bbc:	58000c00 	.word	0x58000c00
 8004bc0:	11fff4ff 	.word	0x11fff4ff
 8004bc4:	40011000 	.word	0x40011000
 8004bc8:	58024400 	.word	0x58024400
 8004bcc:	40004400 	.word	0x40004400
 8004bd0:	40004800 	.word	0x40004800
 8004bd4:	40004c00 	.word	0x40004c00
 8004bd8:	40005000 	.word	0x40005000
 8004bdc:	2340      	movs	r3, #64	; 0x40
 8004bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004be2:	e124      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004be4:	2380      	movs	r3, #128	; 0x80
 8004be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004bea:	e120      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4acc      	ldr	r2, [pc, #816]	; (8004f24 <UART_SetConfig+0x698>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d176      	bne.n	8004ce4 <UART_SetConfig+0x458>
 8004bf6:	4bcc      	ldr	r3, [pc, #816]	; (8004f28 <UART_SetConfig+0x69c>)
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bfe:	2b28      	cmp	r3, #40	; 0x28
 8004c00:	d86c      	bhi.n	8004cdc <UART_SetConfig+0x450>
 8004c02:	a201      	add	r2, pc, #4	; (adr r2, 8004c08 <UART_SetConfig+0x37c>)
 8004c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c08:	08004cad 	.word	0x08004cad
 8004c0c:	08004cdd 	.word	0x08004cdd
 8004c10:	08004cdd 	.word	0x08004cdd
 8004c14:	08004cdd 	.word	0x08004cdd
 8004c18:	08004cdd 	.word	0x08004cdd
 8004c1c:	08004cdd 	.word	0x08004cdd
 8004c20:	08004cdd 	.word	0x08004cdd
 8004c24:	08004cdd 	.word	0x08004cdd
 8004c28:	08004cb5 	.word	0x08004cb5
 8004c2c:	08004cdd 	.word	0x08004cdd
 8004c30:	08004cdd 	.word	0x08004cdd
 8004c34:	08004cdd 	.word	0x08004cdd
 8004c38:	08004cdd 	.word	0x08004cdd
 8004c3c:	08004cdd 	.word	0x08004cdd
 8004c40:	08004cdd 	.word	0x08004cdd
 8004c44:	08004cdd 	.word	0x08004cdd
 8004c48:	08004cbd 	.word	0x08004cbd
 8004c4c:	08004cdd 	.word	0x08004cdd
 8004c50:	08004cdd 	.word	0x08004cdd
 8004c54:	08004cdd 	.word	0x08004cdd
 8004c58:	08004cdd 	.word	0x08004cdd
 8004c5c:	08004cdd 	.word	0x08004cdd
 8004c60:	08004cdd 	.word	0x08004cdd
 8004c64:	08004cdd 	.word	0x08004cdd
 8004c68:	08004cc5 	.word	0x08004cc5
 8004c6c:	08004cdd 	.word	0x08004cdd
 8004c70:	08004cdd 	.word	0x08004cdd
 8004c74:	08004cdd 	.word	0x08004cdd
 8004c78:	08004cdd 	.word	0x08004cdd
 8004c7c:	08004cdd 	.word	0x08004cdd
 8004c80:	08004cdd 	.word	0x08004cdd
 8004c84:	08004cdd 	.word	0x08004cdd
 8004c88:	08004ccd 	.word	0x08004ccd
 8004c8c:	08004cdd 	.word	0x08004cdd
 8004c90:	08004cdd 	.word	0x08004cdd
 8004c94:	08004cdd 	.word	0x08004cdd
 8004c98:	08004cdd 	.word	0x08004cdd
 8004c9c:	08004cdd 	.word	0x08004cdd
 8004ca0:	08004cdd 	.word	0x08004cdd
 8004ca4:	08004cdd 	.word	0x08004cdd
 8004ca8:	08004cd5 	.word	0x08004cd5
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cb2:	e0bc      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004cb4:	2304      	movs	r3, #4
 8004cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cba:	e0b8      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004cbc:	2308      	movs	r3, #8
 8004cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cc2:	e0b4      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004cc4:	2310      	movs	r3, #16
 8004cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cca:	e0b0      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004ccc:	2320      	movs	r3, #32
 8004cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cd2:	e0ac      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004cd4:	2340      	movs	r3, #64	; 0x40
 8004cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004cda:	e0a8      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004cdc:	2380      	movs	r3, #128	; 0x80
 8004cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004ce2:	e0a4      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a90      	ldr	r2, [pc, #576]	; (8004f2c <UART_SetConfig+0x6a0>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d130      	bne.n	8004d50 <UART_SetConfig+0x4c4>
 8004cee:	4b8e      	ldr	r3, [pc, #568]	; (8004f28 <UART_SetConfig+0x69c>)
 8004cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf2:	f003 0307 	and.w	r3, r3, #7
 8004cf6:	2b05      	cmp	r3, #5
 8004cf8:	d826      	bhi.n	8004d48 <UART_SetConfig+0x4bc>
 8004cfa:	a201      	add	r2, pc, #4	; (adr r2, 8004d00 <UART_SetConfig+0x474>)
 8004cfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d00:	08004d19 	.word	0x08004d19
 8004d04:	08004d21 	.word	0x08004d21
 8004d08:	08004d29 	.word	0x08004d29
 8004d0c:	08004d31 	.word	0x08004d31
 8004d10:	08004d39 	.word	0x08004d39
 8004d14:	08004d41 	.word	0x08004d41
 8004d18:	2300      	movs	r3, #0
 8004d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d1e:	e086      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004d20:	2304      	movs	r3, #4
 8004d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d26:	e082      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004d28:	2308      	movs	r3, #8
 8004d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d2e:	e07e      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004d30:	2310      	movs	r3, #16
 8004d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d36:	e07a      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004d38:	2320      	movs	r3, #32
 8004d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d3e:	e076      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004d40:	2340      	movs	r3, #64	; 0x40
 8004d42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d46:	e072      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004d48:	2380      	movs	r3, #128	; 0x80
 8004d4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d4e:	e06e      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a76      	ldr	r2, [pc, #472]	; (8004f30 <UART_SetConfig+0x6a4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d130      	bne.n	8004dbc <UART_SetConfig+0x530>
 8004d5a:	4b73      	ldr	r3, [pc, #460]	; (8004f28 <UART_SetConfig+0x69c>)
 8004d5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	2b05      	cmp	r3, #5
 8004d64:	d826      	bhi.n	8004db4 <UART_SetConfig+0x528>
 8004d66:	a201      	add	r2, pc, #4	; (adr r2, 8004d6c <UART_SetConfig+0x4e0>)
 8004d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d6c:	08004d85 	.word	0x08004d85
 8004d70:	08004d8d 	.word	0x08004d8d
 8004d74:	08004d95 	.word	0x08004d95
 8004d78:	08004d9d 	.word	0x08004d9d
 8004d7c:	08004da5 	.word	0x08004da5
 8004d80:	08004dad 	.word	0x08004dad
 8004d84:	2300      	movs	r3, #0
 8004d86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d8a:	e050      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004d8c:	2304      	movs	r3, #4
 8004d8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d92:	e04c      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004d94:	2308      	movs	r3, #8
 8004d96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004d9a:	e048      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004d9c:	2310      	movs	r3, #16
 8004d9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004da2:	e044      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004da4:	2320      	movs	r3, #32
 8004da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004daa:	e040      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004dac:	2340      	movs	r3, #64	; 0x40
 8004dae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004db2:	e03c      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dba:	e038      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	4a5c      	ldr	r2, [pc, #368]	; (8004f34 <UART_SetConfig+0x6a8>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d130      	bne.n	8004e28 <UART_SetConfig+0x59c>
 8004dc6:	4b58      	ldr	r3, [pc, #352]	; (8004f28 <UART_SetConfig+0x69c>)
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dca:	f003 0307 	and.w	r3, r3, #7
 8004dce:	2b05      	cmp	r3, #5
 8004dd0:	d826      	bhi.n	8004e20 <UART_SetConfig+0x594>
 8004dd2:	a201      	add	r2, pc, #4	; (adr r2, 8004dd8 <UART_SetConfig+0x54c>)
 8004dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd8:	08004df1 	.word	0x08004df1
 8004ddc:	08004df9 	.word	0x08004df9
 8004de0:	08004e01 	.word	0x08004e01
 8004de4:	08004e09 	.word	0x08004e09
 8004de8:	08004e11 	.word	0x08004e11
 8004dec:	08004e19 	.word	0x08004e19
 8004df0:	2302      	movs	r3, #2
 8004df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004df6:	e01a      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004df8:	2304      	movs	r3, #4
 8004dfa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004dfe:	e016      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004e00:	2308      	movs	r3, #8
 8004e02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e06:	e012      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004e08:	2310      	movs	r3, #16
 8004e0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e0e:	e00e      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004e10:	2320      	movs	r3, #32
 8004e12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e16:	e00a      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004e18:	2340      	movs	r3, #64	; 0x40
 8004e1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e1e:	e006      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004e20:	2380      	movs	r3, #128	; 0x80
 8004e22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004e26:	e002      	b.n	8004e2e <UART_SetConfig+0x5a2>
 8004e28:	2380      	movs	r3, #128	; 0x80
 8004e2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a40      	ldr	r2, [pc, #256]	; (8004f34 <UART_SetConfig+0x6a8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	f040 80ef 	bne.w	8005018 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	dc46      	bgt.n	8004ed0 <UART_SetConfig+0x644>
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	f2c0 8081 	blt.w	8004f4a <UART_SetConfig+0x6be>
 8004e48:	3b02      	subs	r3, #2
 8004e4a:	2b1e      	cmp	r3, #30
 8004e4c:	d87d      	bhi.n	8004f4a <UART_SetConfig+0x6be>
 8004e4e:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <UART_SetConfig+0x5c8>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004ed7 	.word	0x08004ed7
 8004e58:	08004f4b 	.word	0x08004f4b
 8004e5c:	08004edf 	.word	0x08004edf
 8004e60:	08004f4b 	.word	0x08004f4b
 8004e64:	08004f4b 	.word	0x08004f4b
 8004e68:	08004f4b 	.word	0x08004f4b
 8004e6c:	08004eef 	.word	0x08004eef
 8004e70:	08004f4b 	.word	0x08004f4b
 8004e74:	08004f4b 	.word	0x08004f4b
 8004e78:	08004f4b 	.word	0x08004f4b
 8004e7c:	08004f4b 	.word	0x08004f4b
 8004e80:	08004f4b 	.word	0x08004f4b
 8004e84:	08004f4b 	.word	0x08004f4b
 8004e88:	08004f4b 	.word	0x08004f4b
 8004e8c:	08004eff 	.word	0x08004eff
 8004e90:	08004f4b 	.word	0x08004f4b
 8004e94:	08004f4b 	.word	0x08004f4b
 8004e98:	08004f4b 	.word	0x08004f4b
 8004e9c:	08004f4b 	.word	0x08004f4b
 8004ea0:	08004f4b 	.word	0x08004f4b
 8004ea4:	08004f4b 	.word	0x08004f4b
 8004ea8:	08004f4b 	.word	0x08004f4b
 8004eac:	08004f4b 	.word	0x08004f4b
 8004eb0:	08004f4b 	.word	0x08004f4b
 8004eb4:	08004f4b 	.word	0x08004f4b
 8004eb8:	08004f4b 	.word	0x08004f4b
 8004ebc:	08004f4b 	.word	0x08004f4b
 8004ec0:	08004f4b 	.word	0x08004f4b
 8004ec4:	08004f4b 	.word	0x08004f4b
 8004ec8:	08004f4b 	.word	0x08004f4b
 8004ecc:	08004f3d 	.word	0x08004f3d
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d036      	beq.n	8004f42 <UART_SetConfig+0x6b6>
 8004ed4:	e039      	b.n	8004f4a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004ed6:	f7ff f867 	bl	8003fa8 <HAL_RCCEx_GetD3PCLK1Freq>
 8004eda:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8004edc:	e03b      	b.n	8004f56 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ede:	f107 0314 	add.w	r3, r7, #20
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff f876 	bl	8003fd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004eec:	e033      	b.n	8004f56 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004eee:	f107 0308 	add.w	r3, r7, #8
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f7ff f9c2 	bl	800427c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004efc:	e02b      	b.n	8004f56 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004efe:	4b0a      	ldr	r3, [pc, #40]	; (8004f28 <UART_SetConfig+0x69c>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0320 	and.w	r3, r3, #32
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d009      	beq.n	8004f1e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f0a:	4b07      	ldr	r3, [pc, #28]	; (8004f28 <UART_SetConfig+0x69c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	08db      	lsrs	r3, r3, #3
 8004f10:	f003 0303 	and.w	r3, r3, #3
 8004f14:	4a08      	ldr	r2, [pc, #32]	; (8004f38 <UART_SetConfig+0x6ac>)
 8004f16:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f1c:	e01b      	b.n	8004f56 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 8004f1e:	4b06      	ldr	r3, [pc, #24]	; (8004f38 <UART_SetConfig+0x6ac>)
 8004f20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f22:	e018      	b.n	8004f56 <UART_SetConfig+0x6ca>
 8004f24:	40011400 	.word	0x40011400
 8004f28:	58024400 	.word	0x58024400
 8004f2c:	40007800 	.word	0x40007800
 8004f30:	40007c00 	.word	0x40007c00
 8004f34:	58000c00 	.word	0x58000c00
 8004f38:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f3c:	4bc4      	ldr	r3, [pc, #784]	; (8005250 <UART_SetConfig+0x9c4>)
 8004f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f40:	e009      	b.n	8004f56 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f46:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004f48:	e005      	b.n	8004f56 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8004f54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 81da 	beq.w	8005312 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f62:	4abc      	ldr	r2, [pc, #752]	; (8005254 <UART_SetConfig+0x9c8>)
 8004f64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f70:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	4613      	mov	r3, r2
 8004f78:	005b      	lsls	r3, r3, #1
 8004f7a:	4413      	add	r3, r2
 8004f7c:	6a3a      	ldr	r2, [r7, #32]
 8004f7e:	429a      	cmp	r2, r3
 8004f80:	d305      	bcc.n	8004f8e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f88:	6a3a      	ldr	r2, [r7, #32]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d903      	bls.n	8004f96 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8004f94:	e1bd      	b.n	8005312 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f04f 0100 	mov.w	r1, #0
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	4aac      	ldr	r2, [pc, #688]	; (8005254 <UART_SetConfig+0x9c8>)
 8004fa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	f7fb f993 	bl	80002d8 <__aeabi_uldivmod>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4619      	mov	r1, r3
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	020b      	lsls	r3, r1, #8
 8004fc4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fc8:	0202      	lsls	r2, r0, #8
 8004fca:	6879      	ldr	r1, [r7, #4]
 8004fcc:	6849      	ldr	r1, [r1, #4]
 8004fce:	0849      	lsrs	r1, r1, #1
 8004fd0:	4608      	mov	r0, r1
 8004fd2:	f04f 0100 	mov.w	r1, #0
 8004fd6:	1814      	adds	r4, r2, r0
 8004fd8:	eb43 0501 	adc.w	r5, r3, r1
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	f04f 0300 	mov.w	r3, #0
 8004fe6:	4620      	mov	r0, r4
 8004fe8:	4629      	mov	r1, r5
 8004fea:	f7fb f975 	bl	80002d8 <__aeabi_uldivmod>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4613      	mov	r3, r2
 8004ff4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ffc:	d308      	bcc.n	8005010 <UART_SetConfig+0x784>
 8004ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005000:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005004:	d204      	bcs.n	8005010 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800500c:	60da      	str	r2, [r3, #12]
 800500e:	e180      	b.n	8005312 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8005016:	e17c      	b.n	8005312 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
 800501c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005020:	f040 80bf 	bne.w	80051a2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8005024:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005028:	2b20      	cmp	r3, #32
 800502a:	dc49      	bgt.n	80050c0 <UART_SetConfig+0x834>
 800502c:	2b00      	cmp	r3, #0
 800502e:	db7c      	blt.n	800512a <UART_SetConfig+0x89e>
 8005030:	2b20      	cmp	r3, #32
 8005032:	d87a      	bhi.n	800512a <UART_SetConfig+0x89e>
 8005034:	a201      	add	r2, pc, #4	; (adr r2, 800503c <UART_SetConfig+0x7b0>)
 8005036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800503a:	bf00      	nop
 800503c:	080050c7 	.word	0x080050c7
 8005040:	080050cf 	.word	0x080050cf
 8005044:	0800512b 	.word	0x0800512b
 8005048:	0800512b 	.word	0x0800512b
 800504c:	080050d7 	.word	0x080050d7
 8005050:	0800512b 	.word	0x0800512b
 8005054:	0800512b 	.word	0x0800512b
 8005058:	0800512b 	.word	0x0800512b
 800505c:	080050e7 	.word	0x080050e7
 8005060:	0800512b 	.word	0x0800512b
 8005064:	0800512b 	.word	0x0800512b
 8005068:	0800512b 	.word	0x0800512b
 800506c:	0800512b 	.word	0x0800512b
 8005070:	0800512b 	.word	0x0800512b
 8005074:	0800512b 	.word	0x0800512b
 8005078:	0800512b 	.word	0x0800512b
 800507c:	080050f7 	.word	0x080050f7
 8005080:	0800512b 	.word	0x0800512b
 8005084:	0800512b 	.word	0x0800512b
 8005088:	0800512b 	.word	0x0800512b
 800508c:	0800512b 	.word	0x0800512b
 8005090:	0800512b 	.word	0x0800512b
 8005094:	0800512b 	.word	0x0800512b
 8005098:	0800512b 	.word	0x0800512b
 800509c:	0800512b 	.word	0x0800512b
 80050a0:	0800512b 	.word	0x0800512b
 80050a4:	0800512b 	.word	0x0800512b
 80050a8:	0800512b 	.word	0x0800512b
 80050ac:	0800512b 	.word	0x0800512b
 80050b0:	0800512b 	.word	0x0800512b
 80050b4:	0800512b 	.word	0x0800512b
 80050b8:	0800512b 	.word	0x0800512b
 80050bc:	0800511d 	.word	0x0800511d
 80050c0:	2b40      	cmp	r3, #64	; 0x40
 80050c2:	d02e      	beq.n	8005122 <UART_SetConfig+0x896>
 80050c4:	e031      	b.n	800512a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050c6:	f7fe f803 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 80050ca:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80050cc:	e033      	b.n	8005136 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050ce:	f7fe f815 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 80050d2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80050d4:	e02f      	b.n	8005136 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050d6:	f107 0314 	add.w	r3, r7, #20
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fe ff7a 	bl	8003fd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050e4:	e027      	b.n	8005136 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050e6:	f107 0308 	add.w	r3, r7, #8
 80050ea:	4618      	mov	r0, r3
 80050ec:	f7ff f8c6 	bl	800427c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80050f4:	e01f      	b.n	8005136 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050f6:	4b58      	ldr	r3, [pc, #352]	; (8005258 <UART_SetConfig+0x9cc>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0320 	and.w	r3, r3, #32
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d009      	beq.n	8005116 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005102:	4b55      	ldr	r3, [pc, #340]	; (8005258 <UART_SetConfig+0x9cc>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	08db      	lsrs	r3, r3, #3
 8005108:	f003 0303 	and.w	r3, r3, #3
 800510c:	4a53      	ldr	r2, [pc, #332]	; (800525c <UART_SetConfig+0x9d0>)
 800510e:	fa22 f303 	lsr.w	r3, r2, r3
 8005112:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005114:	e00f      	b.n	8005136 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8005116:	4b51      	ldr	r3, [pc, #324]	; (800525c <UART_SetConfig+0x9d0>)
 8005118:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800511a:	e00c      	b.n	8005136 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800511c:	4b4c      	ldr	r3, [pc, #304]	; (8005250 <UART_SetConfig+0x9c4>)
 800511e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005120:	e009      	b.n	8005136 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005126:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005128:	e005      	b.n	8005136 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8005134:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 80ea 	beq.w	8005312 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005142:	4a44      	ldr	r2, [pc, #272]	; (8005254 <UART_SetConfig+0x9c8>)
 8005144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005148:	461a      	mov	r2, r3
 800514a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800514c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005150:	005a      	lsls	r2, r3, #1
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	685b      	ldr	r3, [r3, #4]
 8005156:	085b      	lsrs	r3, r3, #1
 8005158:	441a      	add	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005162:	b29b      	uxth	r3, r3
 8005164:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005168:	2b0f      	cmp	r3, #15
 800516a:	d916      	bls.n	800519a <UART_SetConfig+0x90e>
 800516c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005172:	d212      	bcs.n	800519a <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	b29b      	uxth	r3, r3
 8005178:	f023 030f 	bic.w	r3, r3, #15
 800517c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800517e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005180:	085b      	lsrs	r3, r3, #1
 8005182:	b29b      	uxth	r3, r3
 8005184:	f003 0307 	and.w	r3, r3, #7
 8005188:	b29a      	uxth	r2, r3
 800518a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800518c:	4313      	orrs	r3, r2
 800518e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005196:	60da      	str	r2, [r3, #12]
 8005198:	e0bb      	b.n	8005312 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80051a0:	e0b7      	b.n	8005312 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	dc4a      	bgt.n	8005240 <UART_SetConfig+0x9b4>
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	f2c0 8086 	blt.w	80052bc <UART_SetConfig+0xa30>
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	f200 8083 	bhi.w	80052bc <UART_SetConfig+0xa30>
 80051b6:	a201      	add	r2, pc, #4	; (adr r2, 80051bc <UART_SetConfig+0x930>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	08005247 	.word	0x08005247
 80051c0:	08005261 	.word	0x08005261
 80051c4:	080052bd 	.word	0x080052bd
 80051c8:	080052bd 	.word	0x080052bd
 80051cc:	08005269 	.word	0x08005269
 80051d0:	080052bd 	.word	0x080052bd
 80051d4:	080052bd 	.word	0x080052bd
 80051d8:	080052bd 	.word	0x080052bd
 80051dc:	08005279 	.word	0x08005279
 80051e0:	080052bd 	.word	0x080052bd
 80051e4:	080052bd 	.word	0x080052bd
 80051e8:	080052bd 	.word	0x080052bd
 80051ec:	080052bd 	.word	0x080052bd
 80051f0:	080052bd 	.word	0x080052bd
 80051f4:	080052bd 	.word	0x080052bd
 80051f8:	080052bd 	.word	0x080052bd
 80051fc:	08005289 	.word	0x08005289
 8005200:	080052bd 	.word	0x080052bd
 8005204:	080052bd 	.word	0x080052bd
 8005208:	080052bd 	.word	0x080052bd
 800520c:	080052bd 	.word	0x080052bd
 8005210:	080052bd 	.word	0x080052bd
 8005214:	080052bd 	.word	0x080052bd
 8005218:	080052bd 	.word	0x080052bd
 800521c:	080052bd 	.word	0x080052bd
 8005220:	080052bd 	.word	0x080052bd
 8005224:	080052bd 	.word	0x080052bd
 8005228:	080052bd 	.word	0x080052bd
 800522c:	080052bd 	.word	0x080052bd
 8005230:	080052bd 	.word	0x080052bd
 8005234:	080052bd 	.word	0x080052bd
 8005238:	080052bd 	.word	0x080052bd
 800523c:	080052af 	.word	0x080052af
 8005240:	2b40      	cmp	r3, #64	; 0x40
 8005242:	d037      	beq.n	80052b4 <UART_SetConfig+0xa28>
 8005244:	e03a      	b.n	80052bc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005246:	f7fd ff43 	bl	80030d0 <HAL_RCC_GetPCLK1Freq>
 800524a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800524c:	e03c      	b.n	80052c8 <UART_SetConfig+0xa3c>
 800524e:	bf00      	nop
 8005250:	003d0900 	.word	0x003d0900
 8005254:	08005e28 	.word	0x08005e28
 8005258:	58024400 	.word	0x58024400
 800525c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005260:	f7fd ff4c 	bl	80030fc <HAL_RCC_GetPCLK2Freq>
 8005264:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8005266:	e02f      	b.n	80052c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005268:	f107 0314 	add.w	r3, r7, #20
 800526c:	4618      	mov	r0, r3
 800526e:	f7fe feb1 	bl	8003fd4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005276:	e027      	b.n	80052c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005278:	f107 0308 	add.w	r3, r7, #8
 800527c:	4618      	mov	r0, r3
 800527e:	f7fe fffd 	bl	800427c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8005286:	e01f      	b.n	80052c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005288:	4b2c      	ldr	r3, [pc, #176]	; (800533c <UART_SetConfig+0xab0>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 0320 	and.w	r3, r3, #32
 8005290:	2b00      	cmp	r3, #0
 8005292:	d009      	beq.n	80052a8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005294:	4b29      	ldr	r3, [pc, #164]	; (800533c <UART_SetConfig+0xab0>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	08db      	lsrs	r3, r3, #3
 800529a:	f003 0303 	and.w	r3, r3, #3
 800529e:	4a28      	ldr	r2, [pc, #160]	; (8005340 <UART_SetConfig+0xab4>)
 80052a0:	fa22 f303 	lsr.w	r3, r2, r3
 80052a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80052a6:	e00f      	b.n	80052c8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80052a8:	4b25      	ldr	r3, [pc, #148]	; (8005340 <UART_SetConfig+0xab4>)
 80052aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052ac:	e00c      	b.n	80052c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80052ae:	4b25      	ldr	r3, [pc, #148]	; (8005344 <UART_SetConfig+0xab8>)
 80052b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052b2:	e009      	b.n	80052c8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80052ba:	e005      	b.n	80052c8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80052bc:	2300      	movs	r3, #0
 80052be:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80052c6:	bf00      	nop
    }

    if (pclk != 0U)
 80052c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d021      	beq.n	8005312 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d2:	4a1d      	ldr	r2, [pc, #116]	; (8005348 <UART_SetConfig+0xabc>)
 80052d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052d8:	461a      	mov	r2, r3
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	fbb3 f2f2 	udiv	r2, r3, r2
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	085b      	lsrs	r3, r3, #1
 80052e6:	441a      	add	r2, r3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f6:	2b0f      	cmp	r3, #15
 80052f8:	d908      	bls.n	800530c <UART_SetConfig+0xa80>
 80052fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005300:	d204      	bcs.n	800530c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005308:	60da      	str	r2, [r3, #12]
 800530a:	e002      	b.n	8005312 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2201      	movs	r2, #1
 8005316:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2201      	movs	r2, #1
 800531e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2200      	movs	r2, #0
 800532c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800532e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8005332:	4618      	mov	r0, r3
 8005334:	3738      	adds	r7, #56	; 0x38
 8005336:	46bd      	mov	sp, r7
 8005338:	bdb0      	pop	{r4, r5, r7, pc}
 800533a:	bf00      	nop
 800533c:	58024400 	.word	0x58024400
 8005340:	03d09000 	.word	0x03d09000
 8005344:	003d0900 	.word	0x003d0900
 8005348:	08005e28 	.word	0x08005e28

0800534c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005358:	f003 0301 	and.w	r3, r3, #1
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00a      	beq.n	8005376 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	430a      	orrs	r2, r1
 8005374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00a      	beq.n	8005398 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	430a      	orrs	r2, r1
 8005396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00a      	beq.n	80053ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	430a      	orrs	r2, r1
 80053b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053e0:	f003 0310 	and.w	r3, r3, #16
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00a      	beq.n	80053fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	430a      	orrs	r2, r1
 80053fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005402:	f003 0320 	and.w	r3, r3, #32
 8005406:	2b00      	cmp	r3, #0
 8005408:	d00a      	beq.n	8005420 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	430a      	orrs	r2, r1
 800541e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005428:	2b00      	cmp	r3, #0
 800542a:	d01a      	beq.n	8005462 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800544a:	d10a      	bne.n	8005462 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	685b      	ldr	r3, [r3, #4]
 8005474:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	605a      	str	r2, [r3, #4]
  }
}
 8005484:	bf00      	nop
 8005486:	370c      	adds	r7, #12
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b086      	sub	sp, #24
 8005494:	af02      	add	r7, sp, #8
 8005496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80054a0:	f7fb fe00 	bl	80010a4 <HAL_GetTick>
 80054a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 0308 	and.w	r3, r3, #8
 80054b0:	2b08      	cmp	r3, #8
 80054b2:	d10e      	bne.n	80054d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2200      	movs	r2, #0
 80054be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f82f 	bl	8005526 <UART_WaitOnFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d001      	beq.n	80054d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ce:	2303      	movs	r3, #3
 80054d0:	e025      	b.n	800551e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0304 	and.w	r3, r3, #4
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d10e      	bne.n	80054fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054e4:	9300      	str	r3, [sp, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 f819 	bl	8005526 <UART_WaitOnFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e00f      	b.n	800551e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2220      	movs	r2, #32
 800550a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2200      	movs	r2, #0
 8005518:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800551c:	2300      	movs	r3, #0
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005526:	b580      	push	{r7, lr}
 8005528:	b084      	sub	sp, #16
 800552a:	af00      	add	r7, sp, #0
 800552c:	60f8      	str	r0, [r7, #12]
 800552e:	60b9      	str	r1, [r7, #8]
 8005530:	603b      	str	r3, [r7, #0]
 8005532:	4613      	mov	r3, r2
 8005534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005536:	e062      	b.n	80055fe <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800553e:	d05e      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005540:	f7fb fdb0 	bl	80010a4 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	69ba      	ldr	r2, [r7, #24]
 800554c:	429a      	cmp	r2, r3
 800554e:	d302      	bcc.n	8005556 <UART_WaitOnFlagUntilTimeout+0x30>
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d11d      	bne.n	8005592 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005564:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	689a      	ldr	r2, [r3, #8]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0201 	bic.w	r2, r2, #1
 8005574:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2220      	movs	r2, #32
 800557a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2220      	movs	r2, #32
 8005582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2200      	movs	r2, #0
 800558a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e045      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0304 	and.w	r3, r3, #4
 800559c:	2b00      	cmp	r3, #0
 800559e:	d02e      	beq.n	80055fe <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ae:	d126      	bne.n	80055fe <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055c8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689a      	ldr	r2, [r3, #8]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f022 0201 	bic.w	r2, r2, #1
 80055d8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2220      	movs	r2, #32
 80055de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2220      	movs	r2, #32
 80055e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e00f      	b.n	800561e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	69da      	ldr	r2, [r3, #28]
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	4013      	ands	r3, r2
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	429a      	cmp	r2, r3
 800560c:	bf0c      	ite	eq
 800560e:	2301      	moveq	r3, #1
 8005610:	2300      	movne	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	429a      	cmp	r2, r3
 800561a:	d08d      	beq.n	8005538 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3710      	adds	r7, #16
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005626:	b480      	push	{r7}
 8005628:	b085      	sub	sp, #20
 800562a:	af00      	add	r7, sp, #0
 800562c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005634:	2b01      	cmp	r3, #1
 8005636:	d101      	bne.n	800563c <HAL_UARTEx_DisableFifoMode+0x16>
 8005638:	2302      	movs	r3, #2
 800563a:	e027      	b.n	800568c <HAL_UARTEx_DisableFifoMode+0x66>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2224      	movs	r2, #36	; 0x24
 8005648:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f022 0201 	bic.w	r2, r2, #1
 8005662:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800566a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2200      	movs	r2, #0
 8005670:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2220      	movs	r2, #32
 800567e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e02d      	b.n	800570c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2224      	movs	r2, #36	; 0x24
 80056bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 0201 	bic.w	r2, r2, #1
 80056d6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 f84f 	bl	8005790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2220      	movs	r2, #32
 80056fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800570a:	2300      	movs	r3, #0
}
 800570c:	4618      	mov	r0, r3
 800570e:	3710      	adds	r7, #16
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}

08005714 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005724:	2b01      	cmp	r3, #1
 8005726:	d101      	bne.n	800572c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005728:	2302      	movs	r3, #2
 800572a:	e02d      	b.n	8005788 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2224      	movs	r2, #36	; 0x24
 8005738:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f022 0201 	bic.w	r2, r2, #1
 8005752:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	689b      	ldr	r3, [r3, #8]
 800575a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	430a      	orrs	r2, r1
 8005766:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f811 	bl	8005790 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800579c:	2b00      	cmp	r3, #0
 800579e:	d108      	bne.n	80057b2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80057b0:	e031      	b.n	8005816 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80057b2:	2310      	movs	r3, #16
 80057b4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80057b6:	2310      	movs	r3, #16
 80057b8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689b      	ldr	r3, [r3, #8]
 80057c0:	0e5b      	lsrs	r3, r3, #25
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	0f5b      	lsrs	r3, r3, #29
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	f003 0307 	and.w	r3, r3, #7
 80057d8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057da:	7bbb      	ldrb	r3, [r7, #14]
 80057dc:	7b3a      	ldrb	r2, [r7, #12]
 80057de:	4911      	ldr	r1, [pc, #68]	; (8005824 <UARTEx_SetNbDataToProcess+0x94>)
 80057e0:	5c8a      	ldrb	r2, [r1, r2]
 80057e2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80057e6:	7b3a      	ldrb	r2, [r7, #12]
 80057e8:	490f      	ldr	r1, [pc, #60]	; (8005828 <UARTEx_SetNbDataToProcess+0x98>)
 80057ea:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80057ec:	fb93 f3f2 	sdiv	r3, r3, r2
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
 80057fa:	7b7a      	ldrb	r2, [r7, #13]
 80057fc:	4909      	ldr	r1, [pc, #36]	; (8005824 <UARTEx_SetNbDataToProcess+0x94>)
 80057fe:	5c8a      	ldrb	r2, [r1, r2]
 8005800:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005804:	7b7a      	ldrb	r2, [r7, #13]
 8005806:	4908      	ldr	r1, [pc, #32]	; (8005828 <UARTEx_SetNbDataToProcess+0x98>)
 8005808:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800580a:	fb93 f3f2 	sdiv	r3, r3, r2
 800580e:	b29a      	uxth	r2, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005816:	bf00      	nop
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	08005e40 	.word	0x08005e40
 8005828:	08005e48 	.word	0x08005e48

0800582c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800582c:	b084      	sub	sp, #16
 800582e:	b580      	push	{r7, lr}
 8005830:	b084      	sub	sp, #16
 8005832:	af00      	add	r7, sp, #0
 8005834:	6078      	str	r0, [r7, #4]
 8005836:	f107 001c 	add.w	r0, r7, #28
 800583a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005840:	2b01      	cmp	r3, #1
 8005842:	d120      	bne.n	8005886 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	68da      	ldr	r2, [r3, #12]
 8005854:	4b2a      	ldr	r3, [pc, #168]	; (8005900 <USB_CoreInit+0xd4>)
 8005856:	4013      	ands	r3, r2
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005868:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800586a:	2b01      	cmp	r3, #1
 800586c:	d105      	bne.n	800587a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fa60 	bl	8005d40 <USB_CoreReset>
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]
 8005884:	e01a      	b.n	80058bc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fa54 	bl	8005d40 <USB_CoreReset>
 8005898:	4603      	mov	r3, r0
 800589a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800589c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	639a      	str	r2, [r3, #56]	; 0x38
 80058ae:	e005      	b.n	80058bc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80058bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058be:	2b01      	cmp	r3, #1
 80058c0:	d116      	bne.n	80058f0 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058d0:	4b0c      	ldr	r3, [pc, #48]	; (8005904 <USB_CoreInit+0xd8>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	f043 0206 	orr.w	r2, r3, #6
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	f043 0220 	orr.w	r2, r3, #32
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80058f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80058fc:	b004      	add	sp, #16
 80058fe:	4770      	bx	lr
 8005900:	ffbdffbf 	.word	0xffbdffbf
 8005904:	03ee0000 	.word	0x03ee0000

08005908 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f023 0201 	bic.w	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	370c      	adds	r7, #12
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr

0800592a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b082      	sub	sp, #8
 800592e:	af00      	add	r7, sp, #0
 8005930:	6078      	str	r0, [r7, #4]
 8005932:	460b      	mov	r3, r1
 8005934:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005942:	78fb      	ldrb	r3, [r7, #3]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d106      	bne.n	8005956 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	60da      	str	r2, [r3, #12]
 8005954:	e00b      	b.n	800596e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005956:	78fb      	ldrb	r3, [r7, #3]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d106      	bne.n	800596a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	60da      	str	r2, [r3, #12]
 8005968:	e001      	b.n	800596e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e003      	b.n	8005976 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800596e:	2032      	movs	r0, #50	; 0x32
 8005970:	f7fb fba4 	bl	80010bc <HAL_Delay>

  return HAL_OK;
 8005974:	2300      	movs	r3, #0
}
 8005976:	4618      	mov	r0, r3
 8005978:	3708      	adds	r7, #8
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}
	...

08005980 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005980:	b084      	sub	sp, #16
 8005982:	b580      	push	{r7, lr}
 8005984:	b086      	sub	sp, #24
 8005986:	af00      	add	r7, sp, #0
 8005988:	6078      	str	r0, [r7, #4]
 800598a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800598e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800599a:	2300      	movs	r3, #0
 800599c:	613b      	str	r3, [r7, #16]
 800599e:	e009      	b.n	80059b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	3340      	adds	r3, #64	; 0x40
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	4413      	add	r3, r2
 80059aa:	2200      	movs	r2, #0
 80059ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	3301      	adds	r3, #1
 80059b2:	613b      	str	r3, [r7, #16]
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	2b0e      	cmp	r3, #14
 80059b8:	d9f2      	bls.n	80059a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80059ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d11c      	bne.n	80059fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059ce:	f043 0302 	orr.w	r3, r3, #2
 80059d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	e005      	b.n	8005a06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005a0c:	461a      	mov	r2, r3
 8005a0e:	2300      	movs	r3, #0
 8005a10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a18:	4619      	mov	r1, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a20:	461a      	mov	r2, r3
 8005a22:	680b      	ldr	r3, [r1, #0]
 8005a24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d10c      	bne.n	8005a46 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d104      	bne.n	8005a3c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005a32:	2100      	movs	r1, #0
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f949 	bl	8005ccc <USB_SetDevSpeed>
 8005a3a:	e008      	b.n	8005a4e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a3c:	2101      	movs	r1, #1
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f944 	bl	8005ccc <USB_SetDevSpeed>
 8005a44:	e003      	b.n	8005a4e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a46:	2103      	movs	r1, #3
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f000 f93f 	bl	8005ccc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a4e:	2110      	movs	r1, #16
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 f8f3 	bl	8005c3c <USB_FlushTxFifo>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d001      	beq.n	8005a60 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f911 	bl	8005c88 <USB_FlushRxFifo>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a76:	461a      	mov	r2, r3
 8005a78:	2300      	movs	r3, #0
 8005a7a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a82:	461a      	mov	r2, r3
 8005a84:	2300      	movs	r3, #0
 8005a86:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a8e:	461a      	mov	r2, r3
 8005a90:	2300      	movs	r3, #0
 8005a92:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a94:	2300      	movs	r3, #0
 8005a96:	613b      	str	r3, [r7, #16]
 8005a98:	e043      	b.n	8005b22 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005aac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ab0:	d118      	bne.n	8005ae4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d10a      	bne.n	8005ace <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	015a      	lsls	r2, r3, #5
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	4413      	add	r3, r2
 8005ac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005aca:	6013      	str	r3, [r2, #0]
 8005acc:	e013      	b.n	8005af6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ada:	461a      	mov	r2, r3
 8005adc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ae0:	6013      	str	r3, [r2, #0]
 8005ae2:	e008      	b.n	8005af6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	461a      	mov	r2, r3
 8005af2:	2300      	movs	r3, #0
 8005af4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b02:	461a      	mov	r2, r3
 8005b04:	2300      	movs	r3, #0
 8005b06:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	015a      	lsls	r2, r3, #5
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4413      	add	r3, r2
 8005b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b14:	461a      	mov	r2, r3
 8005b16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b1a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	3301      	adds	r3, #1
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b24:	693a      	ldr	r2, [r7, #16]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d3b7      	bcc.n	8005a9a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	613b      	str	r3, [r7, #16]
 8005b2e:	e043      	b.n	8005bb8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b42:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b46:	d118      	bne.n	8005b7a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	015a      	lsls	r2, r3, #5
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	e013      	b.n	8005b8c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b70:	461a      	mov	r2, r3
 8005b72:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	e008      	b.n	8005b8c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	015a      	lsls	r2, r3, #5
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	4413      	add	r3, r2
 8005b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b86:	461a      	mov	r2, r3
 8005b88:	2300      	movs	r3, #0
 8005b8a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	015a      	lsls	r2, r3, #5
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b98:	461a      	mov	r2, r3
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	015a      	lsls	r2, r3, #5
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	4413      	add	r3, r2
 8005ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005baa:	461a      	mov	r2, r3
 8005bac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005bb0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	613b      	str	r3, [r7, #16]
 8005bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bba:	693a      	ldr	r2, [r7, #16]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d3b7      	bcc.n	8005b30 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	68fa      	ldr	r2, [r7, #12]
 8005bca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bd2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005be0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d105      	bne.n	8005bf4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	699b      	ldr	r3, [r3, #24]
 8005bec:	f043 0210 	orr.w	r2, r3, #16
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	699a      	ldr	r2, [r3, #24]
 8005bf8:	4b0e      	ldr	r3, [pc, #56]	; (8005c34 <USB_DevInit+0x2b4>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005c00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d005      	beq.n	8005c12 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	699b      	ldr	r3, [r3, #24]
 8005c0a:	f043 0208 	orr.w	r2, r3, #8
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d105      	bne.n	8005c24 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699a      	ldr	r2, [r3, #24]
 8005c1c:	4b06      	ldr	r3, [pc, #24]	; (8005c38 <USB_DevInit+0x2b8>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005c24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3718      	adds	r7, #24
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c30:	b004      	add	sp, #16
 8005c32:	4770      	bx	lr
 8005c34:	803c3800 	.word	0x803c3800
 8005c38:	40000004 	.word	0x40000004

08005c3c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
 8005c44:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	019b      	lsls	r3, r3, #6
 8005c4e:	f043 0220 	orr.w	r2, r3, #32
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	60fb      	str	r3, [r7, #12]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4a09      	ldr	r2, [pc, #36]	; (8005c84 <USB_FlushTxFifo+0x48>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d901      	bls.n	8005c68 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005c64:	2303      	movs	r3, #3
 8005c66:	e006      	b.n	8005c76 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d0f0      	beq.n	8005c56 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3714      	adds	r7, #20
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	00030d40 	.word	0x00030d40

08005c88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b085      	sub	sp, #20
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2210      	movs	r2, #16
 8005c98:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	4a09      	ldr	r2, [pc, #36]	; (8005cc8 <USB_FlushRxFifo+0x40>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d901      	bls.n	8005cac <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e006      	b.n	8005cba <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f003 0310 	and.w	r3, r3, #16
 8005cb4:	2b10      	cmp	r3, #16
 8005cb6:	d0f0      	beq.n	8005c9a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3714      	adds	r7, #20
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
 8005cc6:	bf00      	nop
 8005cc8:	00030d40 	.word	0x00030d40

08005ccc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	78fb      	ldrb	r3, [r7, #3]
 8005ce6:	68f9      	ldr	r1, [r7, #12]
 8005ce8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cec:	4313      	orrs	r3, r2
 8005cee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b085      	sub	sp, #20
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005d18:	f023 0303 	bic.w	r3, r3, #3
 8005d1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d2c:	f043 0302 	orr.w	r3, r3, #2
 8005d30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005d32:	2300      	movs	r3, #0
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3714      	adds	r7, #20
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d40:	b480      	push	{r7}
 8005d42:	b085      	sub	sp, #20
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	3301      	adds	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4a13      	ldr	r2, [pc, #76]	; (8005da4 <USB_CoreReset+0x64>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e01b      	b.n	8005d96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	daf2      	bge.n	8005d4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	f043 0201 	orr.w	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4a09      	ldr	r2, [pc, #36]	; (8005da4 <USB_CoreReset+0x64>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d901      	bls.n	8005d88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e006      	b.n	8005d96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d0f0      	beq.n	8005d76 <USB_CoreReset+0x36>

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	00030d40 	.word	0x00030d40

08005da8 <__libc_init_array>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	4d0d      	ldr	r5, [pc, #52]	; (8005de0 <__libc_init_array+0x38>)
 8005dac:	4c0d      	ldr	r4, [pc, #52]	; (8005de4 <__libc_init_array+0x3c>)
 8005dae:	1b64      	subs	r4, r4, r5
 8005db0:	10a4      	asrs	r4, r4, #2
 8005db2:	2600      	movs	r6, #0
 8005db4:	42a6      	cmp	r6, r4
 8005db6:	d109      	bne.n	8005dcc <__libc_init_array+0x24>
 8005db8:	4d0b      	ldr	r5, [pc, #44]	; (8005de8 <__libc_init_array+0x40>)
 8005dba:	4c0c      	ldr	r4, [pc, #48]	; (8005dec <__libc_init_array+0x44>)
 8005dbc:	f000 f820 	bl	8005e00 <_init>
 8005dc0:	1b64      	subs	r4, r4, r5
 8005dc2:	10a4      	asrs	r4, r4, #2
 8005dc4:	2600      	movs	r6, #0
 8005dc6:	42a6      	cmp	r6, r4
 8005dc8:	d105      	bne.n	8005dd6 <__libc_init_array+0x2e>
 8005dca:	bd70      	pop	{r4, r5, r6, pc}
 8005dcc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd0:	4798      	blx	r3
 8005dd2:	3601      	adds	r6, #1
 8005dd4:	e7ee      	b.n	8005db4 <__libc_init_array+0xc>
 8005dd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dda:	4798      	blx	r3
 8005ddc:	3601      	adds	r6, #1
 8005dde:	e7f2      	b.n	8005dc6 <__libc_init_array+0x1e>
 8005de0:	08005e58 	.word	0x08005e58
 8005de4:	08005e58 	.word	0x08005e58
 8005de8:	08005e58 	.word	0x08005e58
 8005dec:	08005e5c 	.word	0x08005e5c

08005df0 <memset>:
 8005df0:	4402      	add	r2, r0
 8005df2:	4603      	mov	r3, r0
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d100      	bne.n	8005dfa <memset+0xa>
 8005df8:	4770      	bx	lr
 8005dfa:	f803 1b01 	strb.w	r1, [r3], #1
 8005dfe:	e7f9      	b.n	8005df4 <memset+0x4>

08005e00 <_init>:
 8005e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e02:	bf00      	nop
 8005e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e06:	bc08      	pop	{r3}
 8005e08:	469e      	mov	lr, r3
 8005e0a:	4770      	bx	lr

08005e0c <_fini>:
 8005e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0e:	bf00      	nop
 8005e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e12:	bc08      	pop	{r3}
 8005e14:	469e      	mov	lr, r3
 8005e16:	4770      	bx	lr
